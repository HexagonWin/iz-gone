var memecApp;
(function (memecApp) {
    'use strict';
    var GlobalConfigController = (function () {
        function GlobalConfigController(APP_CONF) {
            this.APP_CONF = APP_CONF;
            this.resourceUrl = this.APP_CONF.resourceUrl;
            this.groupId = this.APP_CONF.groupId;
        }
        return GlobalConfigController;
    }());
    memecApp.GlobalConfigController = GlobalConfigController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var WholeController = (function () {
        function WholeController(CartCountResource) {
            this.CartCountResource = CartCountResource;
            this.keyword = '';
        }
        WholeController.prototype.fetchCartCount = function () {
            var _this = this;
            this.CartCountResource.get()
                .$promise.then(function (data) {
                _this.cartCount = data.count;
            }).catch(angular.noop);
        };
        return WholeController;
    }());
    memecApp.WholeController = WholeController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var HeaderController = (function () {
        function HeaderController(APP_CONF, $uibModal, AuthResource, CartCountResource, CategoryResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.$uibModal = $uibModal;
            this.AuthResource = AuthResource;
            this.CartCountResource = CartCountResource;
            this.CategoryResource = CategoryResource;
            this.iconTitle = 'Loading...';
            this.AuthResource.get()
                .$promise.then(function (data) {
                if (data.logged_in) {
                    _this.isLogin = true;
                    _this.iconTitle = 'マイページ';
                }
                else {
                    _this.initInLogout();
                }
            }, function (data) {
                _this.initInLogout();
            }).catch(angular.noop);
            this.CartCountResource.get()
                .$promise.then(function (data) {
                _this.cartCount = data.count;
            }).catch(angular.noop);
        }
        HeaderController.prototype.init = function (groupId) {
            this.groupId = groupId;
            if (this.APP_CONF.scrollToTopButtonImageName[groupId]) {
                this.scrollToTopButtonImage = this.APP_CONF.resourceUrl
                    .concat(this.APP_CONF.scrollToTopButtonImagePath, '/', this.APP_CONF.scrollToTopButtonImageName[groupId]);
            }
        };
        HeaderController.prototype.login = function () {
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                location.reload();
            }, function () {
            });
        };
        HeaderController.prototype.initInLogout = function () {
            this.isLogin = false;
            this.iconTitle = 'ログイン';
        };
        return HeaderController;
    }());
    memecApp.HeaderController = HeaderController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var RightMenuController = (function () {
        function RightMenuController(APP_CONF, $uibModal, AuthResource, MeResource, CategoryResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.$uibModal = $uibModal;
            this.AuthResource = AuthResource;
            this.MeResource = MeResource;
            this.CategoryResource = CategoryResource;
            this.userName = 'Now Loading...';
            this.electedUrl = this.APP_CONF.electedUrl;
            this.leadRegURI = this.APP_CONF.leadRegistrationUri;
            this.twitterUrl = this.APP_CONF.twitterUrl;
            this.AuthResource.get()
                .$promise.then(function (data) {
                if (data.logged_in) {
                    _this.isLogin = true;
                    _this.MeResource.get()
                        .$promise.then(function (data) {
                        _this.userName = data.name.last + data.name.first + 'さん';
                    }).catch(angular.noop);
                }
                else {
                    _this.initInLogout();
                }
            }, function (data) {
                _this.initInLogout();
            }).catch(angular.noop);
        }
        RightMenuController.prototype.init = function (groupId) {
            this.groupId = groupId;
            if (groupId !== 0) {
                this.CategoryList = this.CategoryResource.query({ group_id: groupId });
                this.CategoryList.$promise.catch(angular.noop);
            }
        };
        RightMenuController.prototype.login = function () {
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                location.reload();
            }, function () {
            });
        };
        RightMenuController.prototype.logout = function () {
            this.AuthResource.delete()
                .$promise.then(function (data) {
                location.reload();
            }).catch(angular.noop);
        };
        RightMenuController.prototype.initInLogout = function () {
            this.isLogin = false;
        };
        return RightMenuController;
    }());
    memecApp.RightMenuController = RightMenuController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SearchBarController = (function () {
        function SearchBarController(APP_CONF, AuthResource, MeResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.AuthResource = AuthResource;
            this.MeResource = MeResource;
            this.userName = 'Now Loading...';
            this.dispFlg = false;
            this.AuthResource.get()
                .$promise.then(function (data) {
                if (data.logged_in) {
                    _this.isLogin = true;
                    _this.MeResource.get()
                        .$promise.then(function (data) {
                        _this.userName = 'こんにちは！' + data.name.last + data.name.first + 'さん';
                        _this.dispFlg = true;
                    }).catch(angular.noop);
                }
                else {
                    _this.initInLogout();
                }
            }, function (data) {
                _this.initInLogout();
            }).catch(angular.noop);
        }
        SearchBarController.prototype.init = function (wholeCtrl, groupId, query) {
            this.wholeCtrl = wholeCtrl;
            this.groupId = groupId;
            this.wholeCtrl.keyword = query;
        };
        SearchBarController.prototype.search = function () {
            location.href = this.createSearchUri(this.wholeCtrl.keyword);
        };
        SearchBarController.prototype.createSearchUri = function (keyword) {
            var apiPrefix = '/selection/search/' + this.groupId;
            if (keyword) {
                return apiPrefix + '?q=' + encodeURIComponent(keyword);
            }
            else {
                return apiPrefix;
            }
        };
        SearchBarController.prototype.initInLogout = function () {
            this.isLogin = false;
            this.leadRegURI = this.APP_CONF.leadRegistrationUri;
            this.dispFlg = true;
        };
        return SearchBarController;
    }());
    memecApp.SearchBarController = SearchBarController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SelectionFooterController = (function () {
        function SelectionFooterController(APP_CONF, GroupInfoResource, CategoryResource) {
            this.APP_CONF = APP_CONF;
            this.GroupInfoResource = GroupInfoResource;
            this.CategoryResource = CategoryResource;
            this.teamList = [];
            this.selectIndex = 0;
            this.memberImgUrl = 'img/members/';
            this.sliderParams = {};
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.officialSiteURL = this.APP_CONF.officialSiteURL;
        }
        SelectionFooterController.prototype.init = function (groupId) {
            var _this = this;
            this.groupId = groupId;
            if (groupId !== 0) {
                this.groupInfo = this.GroupInfoResource.get({ id: groupId });
                this.groupInfo.$promise.then(function () {
                    angular.forEach(_this.groupInfo.teams, function (team, i) {
                        _this.teamList.push(team.name);
                        _this.makeSliderParam(team);
                    });
                }).catch(angular.noop);
                this.CategoryList = this.CategoryResource.query({ group_id: groupId });
                this.CategoryList.$promise.catch(angular.noop);
            }
        };
        SelectionFooterController.prototype.makeSliderParam = function (team) {
            var _this = this;
            this.sliderParams[team.id] = [];
            angular.forEach(team.members, function (member) {
                _this.sliderParams[team.id].push({
                    imgSrc: _this.bannerDomain + _this.memberImgUrl + member.id + '_member_160.jpg',
                    imgName: member.name,
                    link: '/selection/list-member/' + member.group_id + '/' + member.id
                });
            });
        };
        SelectionFooterController.prototype.changeTeam = function (selectIndex) {
            $('.menberslider').parent("div").height(105);
            this.selectIndex = selectIndex;
        };
        return SelectionFooterController;
    }());
    memecApp.SelectionFooterController = SelectionFooterController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var FooterController = (function () {
        function FooterController(APP_CONF) {
            this.APP_CONF = APP_CONF;
            this.leadRegURI = this.APP_CONF.leadRegistrationUri;
            this.twitterUrl = this.APP_CONF.twitterUrl;
        }
        return FooterController;
    }());
    memecApp.FooterController = FooterController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SideController = (function () {
        function SideController(APP_CONF, CategoryResource) {
            this.APP_CONF = APP_CONF;
            this.CategoryResource = CategoryResource;
            this.twitterUrl = this.APP_CONF.twitterUrl;
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.officialSiteURL = this.APP_CONF.officialSiteURL;
        }
        SideController.prototype.init = function (groupId) {
            this.groupId = groupId;
            if (groupId !== 0) {
                this.CategoryList = this.CategoryResource.query({ group_id: groupId });
                this.CategoryList.$promise.catch(angular.noop);
            }
        };
        return SideController;
    }());
    memecApp.SideController = SideController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var LoginController = (function () {
        function LoginController(APP_CONF, AuthResource, LoginValidationService, $cookies, $uibModalInstance) {
            this.APP_CONF = APP_CONF;
            this.AuthResource = AuthResource;
            this.LoginValidationService = LoginValidationService;
            this.$cookies = $cookies;
            this.$uibModalInstance = $uibModalInstance;
            this.isLoginBtnDisabled = false;
            this.userId = this.$cookies.get('userId');
            this.passwd = '';
            this.canPressEnter = true;
            this.record = this.userId ? true : false;
            this.passwdResetURL = this.APP_CONF.passResetUrl;
            this.idRemindURL = this.APP_CONF.userIdRemindUrl;
            this.leadRegURI = this.APP_CONF.leadRegistrationUri;
            this.errorMessageWhole = '';
            this.errorMessageUserId = '';
            this.errorMessagePassword = '';
            window.scrollTo(0, 0);
        }
        LoginController.prototype.login = function () {
            var _this = this;
            this.isLoginBtnDisabled = true;
            this.errorMessageWhole = '';
            this.errorMessageUserId = this.LoginValidationService.validateUserId(this.userId);
            this.errorMessagePassword = this.LoginValidationService.validatePassword(this.passwd);
            if (this.errorMessageUserId || this.errorMessagePassword) {
                this.canPressEnter = true;
                this.isLoginBtnDisabled = false;
                return;
            }
            if (this.record) {
                var expire = new Date();
                expire.setMonth(expire.getMonth() + 3);
                this.$cookies.put('userId', this.userId, {
                    'path': '/',
                    expires: expire
                });
            }
            else {
                this.$cookies.remove('userId');
            }
            this.AuthResource.update({ id: this.userId, password: this.passwd })
                .$promise.then(function (data) {
                _this.$uibModalInstance.close();
            }).catch(function (data) {
                var HTTP_UNAUTHORIZED = 401;
                if (data.status === HTTP_UNAUTHORIZED) {
                    _this.errorMessageWhole = 'IDもしくはパスワードが正しくありません。';
                }
                else {
                    _this.errorMessageWhole = 'ただいま大変混み合っています。誠に恐れ入りますが、しばらくお待ちいただいてから、再度お試しください。';
                }
                _this.canPressEnter = true;
                _this.isLoginBtnDisabled = false;
            });
        };
        LoginController.prototype.loginByEnterKey = function (keyDownEvent) {
            var KEY_ENTER = 13;
            if (!this.canPressEnter)
                return;
            if (keyDownEvent.which === KEY_ENTER) {
                this.canPressEnter = false;
                this.login();
            }
        };
        LoginController.prototype.cancel = function () {
            this.$uibModalInstance.dismiss();
        };
        return LoginController;
    }());
    memecApp.LoginController = LoginController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var DebugHttpsController = (function () {
        function DebugHttpsController(DebugHttpsResource) {
            var _this = this;
            this.DebugHttpsResource = DebugHttpsResource;
            this.responseMsg = '';
            this.requestMsg = '';
            this.DebugHttpsResource.get()
                .$promise.then(function (data) {
                _this.responseMsg = data.msg;
            })
                .catch(function (error) {
                _this.responseMsg = 'get error';
            });
        }
        DebugHttpsController.prototype.tryHttpsUpdate = function () {
            var _this = this;
            this.DebugHttpsResource.update({ msg: this.requestMsg })
                .$promise.then(function (data) {
                location.reload();
            })
                .catch(function (error) {
                _this.responseMsg = 'put error';
            });
        };
        return DebugHttpsController;
    }());
    memecApp.DebugHttpsController = DebugHttpsController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var InNavController = (function () {
        function InNavController(CategoryResource) {
            this.CategoryResource = CategoryResource;
        }
        InNavController.prototype.init = function (groupId) {
            this.groupId = groupId;
            if (groupId !== 0) {
                this.CategoryList = this.CategoryResource.query({ group_id: groupId });
                this.CategoryList.$promise.catch(angular.noop);
            }
        };
        return InNavController;
    }());
    memecApp.InNavController = InNavController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ModalBannerController = (function () {
        function ModalBannerController($uibModalInstance, viewContents) {
            this.$uibModalInstance = $uibModalInstance;
            this.viewContents = viewContents;
        }
        ModalBannerController.prototype.cancel = function () {
            this.$uibModalInstance.dismiss();
        };
        return ModalBannerController;
    }());
    memecApp.ModalBannerController = ModalBannerController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ImgUrlController = (function () {
        function ImgUrlController(APP_CONF, ImgUrlService) {
            this.APP_CONF = APP_CONF;
            this.ImgUrlService = ImgUrlService;
            this.resourceUrl = this.APP_CONF.resourceUrl;
        }
        ImgUrlController.prototype.createCategoryBannerUrl = function (directoryUrl) {
            return this.ImgUrlService.createCategoryBannerUrl(directoryUrl);
        };
        ImgUrlController.prototype.createProductListImgUrl = function (code) {
            return this.ImgUrlService.createProductListImgUrl(code);
        };
        ImgUrlController.prototype.createProductDetailImgUrl = function (code, order) {
            return this.ImgUrlService.createProductDetailImgUrl(code, order);
        };
        ImgUrlController.prototype.createCartImgUrl = function (code) {
            return this.ImgUrlService.createCartImgUrl(code);
        };
        return ImgUrlController;
    }());
    memecApp.ImgUrlController = ImgUrlController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var GlobalMenuController = (function () {
        function GlobalMenuController(APP_CONF, $uibModal, $resource, $scope, AuthResource, MeResource) {
            this.APP_CONF = APP_CONF;
            this.$uibModal = $uibModal;
            this.$resource = $resource;
            this.$scope = $scope;
            this.AuthResource = AuthResource;
            this.MeResource = MeResource;
            this.isLoading = false;
            this.userName = '';
            this.memberRegUrl = this.APP_CONF.memberRegUrl;
            this.forceGetLoginStatus();
        }
        GlobalMenuController.prototype.openMenu = function () {
            this.menuModalInstance = this.$uibModal.open({
                controller: 'GlobalMenuController as modalGlobalMenuCtrl',
                templateUrl: '/top/globalmenu',
                scope: this.$scope,
                backdrop: 'true'
            });
            this.menuModalInstance.result.then(function () {
            }, function () {
            });
            $('body, html').animate({ scrollTop: 0 }, 300);
        };
        GlobalMenuController.prototype.closeMenu = function () {
            this.$scope.$parent.globalMenuCtrl.menuModalInstance.close();
        };
        GlobalMenuController.prototype.login = function () {
            var _this = this;
            this.loginModalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.loginModalInstance.result.then(function () {
                _this.forceGetLoginStatus();
            }, function () {
            });
        };
        GlobalMenuController.prototype.logout = function () {
            var _this = this;
            this.isLoading = true;
            this.AuthResource.delete().$promise.then(function () {
                _this.isLogin = false;
                _this.userName = '';
                _this.isLoading = false;
                location.href = '/';
            }).catch(function () {
                _this.isLoading = false;
            });
        };
        GlobalMenuController.prototype.forceGetLoginStatus = function () {
            var _this = this;
            var forceGetLoginResource = this.$resource('/api/v1/authentication/:groupId', { groupId: '@groupId' }, {
                get: { method: 'GET' }
            });
            this.isLoading = true;
            forceGetLoginResource.get().$promise.then(function (data) {
                _this.isLogin = data.logged_in;
                _this.isLoading = false;
                _this.userInfo = _this.MeResource.get();
                _this.userInfo.$promise.then(function (data) {
                    _this.userName = _this.userInfo.name.last + _this.userInfo.name.first;
                }).catch(angular.noop);
            }, function (data) {
                _this.isLogin = false;
                _this.isLoading = false;
            }).catch(function () {
                _this.isLogin = false;
                _this.isLoading = false;
            });
        };
        return GlobalMenuController;
    }());
    memecApp.GlobalMenuController = GlobalMenuController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SearchPageRedirectController = (function () {
        function SearchPageRedirectController() {
            this.searchKeyword = '';
            this.hide = true;
        }
        SearchPageRedirectController.prototype.redirectToSearchPage = function () {
            location.href = this.createSearchPageUri(this.searchKeyword);
        };
        SearchPageRedirectController.prototype.createSearchPageUri = function (keyword) {
            var apiPrefix = '/selection/search';
            if (keyword) {
                return apiPrefix + '?q=' + encodeURIComponent(keyword);
            }
            else {
                return apiPrefix;
            }
        };
        return SearchPageRedirectController;
    }());
    memecApp.SearchPageRedirectController = SearchPageRedirectController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CategoryLinkListController = (function () {
        function CategoryLinkListController(APP_CONF, CategoryResource) {
            this.APP_CONF = APP_CONF;
            this.CategoryResource = CategoryResource;
            this.categoryList = this.CategoryResource.query({ group_id: this.APP_CONF.groupId });
            this.categoryList.$promise.catch(angular.noop);
        }
        return CategoryLinkListController;
    }());
    memecApp.CategoryLinkListController = CategoryLinkListController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ServerTimeController = (function () {
        function ServerTimeController(ServerTimeResource) {
            var _this = this;
            this.ServerTimeResource = ServerTimeResource;
            this.ServerTimeResource.get().$promise.then(function (data) {
                _this.now = new Date(data.now);
            }).catch(angular.noop);
        }
        ServerTimeController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        return ServerTimeController;
    }());
    memecApp.ServerTimeController = ServerTimeController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MemberController = (function () {
        function MemberController(APP_CONF, GroupInfoResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.GroupInfoResource = GroupInfoResource;
            this.memberParams = [];
            this.groupInfo = this.GroupInfoResource.get({ id: this.APP_CONF.groupId });
            this.groupInfo.$promise.then(function () {
                _this.makeMemberParam(_this.groupInfo.teams[0]);
            }).catch(angular.noop);
        }
        MemberController.prototype.makeMemberParam = function (team) {
            var _this = this;
            this.memberParams = [];
            angular.forEach(team.members, function (member) {
                _this.memberParams.push({
                    imgSrc: _this.APP_CONF.resourceUrl + 'img/members/' + member.id + '_member_400.jpg',
                    name: member.name,
                    nameRoman: member.name_roman,
                    themeColor: member.theme_color,
                    borderStyle: member.theme_color ? ("{'border': 'solid 4px " + member.theme_color + "'}") : '',
                    link: '/selection/list-member/' + member.id
                });
            });
        };
        return MemberController;
    }());
    memecApp.MemberController = MemberController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var UtilService = (function () {
        function UtilService() {
        }
        UtilService.prototype.isSmartphone = function () {
            if (screen.width < 769) {
                return true;
            }
            else {
                return false;
            }
        };
        UtilService.prototype.isset = function (target, key_path) {
            var key, paths;
            paths = key_path.split(".");
            try {
                while (paths.length > 0) {
                    key = paths.shift();
                    target = target[key];
                }
            }
            catch (e) {
                target = undefined;
            }
            finally {
                return target !== undefined;
            }
        };
        UtilService.prototype.showLoadingModal = function (uibModal, scope) {
            window.scrollTo(0, 0);
            return uibModal.open({
                scope: scope,
                templateUrl: '/assets/html/loading.html',
                backdrop: 'static'
            });
        };
        return UtilService;
    }());
    memecApp.UtilService = UtilService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var BannerService = (function () {
        function BannerService(APP_CONF, $http) {
            this.APP_CONF = APP_CONF;
            this.$http = $http;
            this.resourceUrl = this.APP_CONF.resourceUrl;
        }
        BannerService.prototype.fetchBannerList = function (groupId, page, position, callback) {
            var groupName = 'izone';
            var fileName = groupName + '-' + page + '-' + position;
            this.$http({
                method: 'GET',
                url: '/api/v1/banners/settings?key=' + fileName
            })
                .then(function (response) {
                callback(response.data);
            }).catch(angular.noop);
        };
        return BannerService;
    }());
    memecApp.BannerService = BannerService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var JobService = (function () {
        function JobService($http, $interval) {
            this.$http = $http;
            this.$interval = $interval;
            this.maxCount = 65;
        }
        JobService.prototype.execJob = function (resources, token, successCallBack, failCallBack, timeoutCallBack) {
            var _this = this;
            var cnt = 0;
            this.fetchProgress(resources, token);
            var timer = this.$interval(function () {
                if (_this.progress === 'success') {
                    _this.$interval.cancel(timer);
                    successCallBack(_this.result);
                }
                if (_this.progress === 'error') {
                    _this.$interval.cancel(timer);
                    failCallBack(_this.responseData);
                }
                if (cnt >= _this.maxCount) {
                    _this.$interval.cancel(timer);
                    timeoutCallBack();
                }
                cnt = cnt + 1;
                _this.fetchProgress(resources, token);
            }, 1000);
        };
        JobService.prototype.fetchProgress = function (resources, token) {
            var _this = this;
            this.$http({
                method: 'GET',
                url: '/api/v1/' + resources + '/progress?token=' + encodeURIComponent(token)
            })
                .then(function (response) {
                _this.progress = response.data.progress;
                _this.result = response.data.result;
                _this.responseData = response.data;
            }).catch(angular.noop);
        };
        return JobService;
    }());
    memecApp.JobService = JobService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ImgUrlService = (function () {
        function ImgUrlService(APP_CONF, UtilService) {
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.productImgUrl = 'img/products/';
            this.imgOrder = [
                'p01', 'p02', 'p03', 'p04', 'p05', 'p06', 'p07', 'p08', 'p09', 'p10',
                'p11', 'p12', 'p13', 'p14', 'p15', 'p16', 'p17', 'p18', 'p19', 'p20'
            ];
            this.imgSize = {
                s: '80',
                m: '160',
                l: '500'
            };
            this.bannerName = {
                pc: 'pc.jpg',
                pc_thum: 'pc_thum.jpg',
                sp: 'sp.jpg'
            };
            this.imgExt = '.jpg';
            this.resourceUrl = this.APP_CONF.resourceUrl;
        }
        ImgUrlService.prototype.createCategoryBannerUrl = function (directoryUrl) {
            if (this.UtilService.isSmartphone()) {
                return this.resourceUrl + directoryUrl + this.bannerName.sp;
            }
            else {
                return this.resourceUrl + directoryUrl + this.bannerName.pc;
            }
        };
        ImgUrlService.prototype.createProductListImgUrl = function (code) {
            if (this.UtilService.isSmartphone()) {
                return this.resourceUrl + this.productImgUrl + code + '_' + this.imgOrder[0] + '_' + this.imgSize.l + this.imgExt;
            }
            else {
                return this.resourceUrl + this.productImgUrl + code + '_' + this.imgOrder[0] + '_' + this.imgSize.l + this.imgExt;
            }
        };
        ImgUrlService.prototype.createProductDetailImgUrl = function (code, order) {
            if (this.UtilService.isSmartphone()) {
                return this.resourceUrl + this.productImgUrl + code + '_' + this.imgOrder[order] + '_' + this.imgSize.l + this.imgExt;
            }
            else {
                return this.resourceUrl + this.productImgUrl + code + '_' + this.imgOrder[order] + '_' + this.imgSize.l + this.imgExt;
            }
        };
        ImgUrlService.prototype.createCartImgUrl = function (code) {
            if (this.UtilService.isSmartphone()) {
                return this.resourceUrl + this.productImgUrl + code + '_' + this.imgOrder[0] + '_' + this.imgSize.m + this.imgExt;
            }
            else {
                return this.resourceUrl + this.productImgUrl + code + '_' + this.imgOrder[0] + '_' + this.imgSize.m + this.imgExt;
            }
        };
        return ImgUrlService;
    }());
    memecApp.ImgUrlService = ImgUrlService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var IdentifyPaymentService = (function () {
        function IdentifyPaymentService() {
        }
        IdentifyPaymentService.prototype.isCredit = function (paymentId) {
            return paymentId === 5;
        };
        IdentifyPaymentService.prototype.isCash = function (paymentId) {
            return paymentId === 10 || paymentId === 11 || paymentId === 12 || paymentId === 13 || paymentId === 14;
        };
        IdentifyPaymentService.prototype.isConveni = function (paymentId) {
            return paymentId === 15 || paymentId === 18;
        };
        return IdentifyPaymentService;
    }());
    memecApp.IdentifyPaymentService = IdentifyPaymentService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var AuthResource = (function () {
        function AuthResource($resource) {
            return $resource('/api/v1/authentication/:groupId', { groupId: '@groupId' }, {
                get: { method: 'GET', cache: true },
                update: { path: 'https://' + location.host + '/api/v1/authentication', method: 'PUT', isArray: true, withCredentials: true }
            });
        }
        return AuthResource;
    }());
    memecApp.AuthResource = AuthResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CartResource = (function () {
        function CartResource($resource) {
            return $resource('/api/v1/carts', {}, {
                update: { method: 'PUT' },
                remove: { method: 'POST', url: '/api/v1/carts/delete' },
                updateMultiple: { method: 'PUT', url: '/api/v1/carts/multiple' }
            });
        }
        return CartResource;
    }());
    memecApp.CartResource = CartResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ServerTimeResource = (function () {
        function ServerTimeResource($resource) {
            return $resource('/api/v1/servertime', {}, {
                get: { method: 'GET', cache: true }
            });
        }
        return ServerTimeResource;
    }());
    memecApp.ServerTimeResource = ServerTimeResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CartCountResource = (function () {
        function CartCountResource($resource) {
            return $resource('/api/v1/carts/count');
        }
        return CartCountResource;
    }());
    memecApp.CartCountResource = CartCountResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductDetailResource = (function () {
        function ProductDetailResource($resource) {
            return $resource('/api/v1/products/:id', { id: '@id' }, {
                get: { method: 'GET', cache: true },
                query: { method: 'GET', cache: true, isArray: true }
            });
        }
        return ProductDetailResource;
    }());
    memecApp.ProductDetailResource = ProductDetailResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var UserResource = (function () {
        function UserResource($resource) {
            return $resource('/user/:id', { groupId: '@id' }, {
                update: { method: 'PUT' }
            });
        }
        return UserResource;
    }());
    memecApp.UserResource = UserResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var FavoriteResource = (function () {
        function FavoriteResource($resource) {
            return $resource('/api/v1/favorite-products', {}, {
                update: { method: 'PUT', isArray: false, params: { product_id: "@product_id" } }
            });
        }
        return FavoriteResource;
    }());
    memecApp.FavoriteResource = FavoriteResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CategoryResource = (function () {
        function CategoryResource($resource) {
            return $resource('/api/v1/products/categories/:id', { id: '@id' }, {
                get: { method: 'GET', cache: true },
                query: { method: 'GET', cache: true, isArray: true }
            });
        }
        return CategoryResource;
    }());
    memecApp.CategoryResource = CategoryResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CategorySliderDirective = (function () {
        function CategorySliderDirective() {
            return this.CreateDirective();
        }
        CategorySliderDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    if (scope.$last === true) {
                        setTimeout(function () {
                            $('.level1 .head').unbind('click');
                            $('.level1 .head').click(function () {
                                $(this).toggleClass("active");
                                $(this).parent().next('.level2').slideToggle('');
                            });
                            $('.level2 .head').unbind('click');
                            $('.level2 .head').click(function (e) {
                                $(this).toggleClass("active");
                                $(this).next('.level3').slideToggle('');
                                e.stopPropagation();
                            });
                        }, 0);
                    }
                }
            };
        };
        return CategorySliderDirective;
    }());
    memecApp.CategorySliderDirective = CategorySliderDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ImgSliderDirective = (function () {
        function ImgSliderDirective() {
            return this.init();
        }
        ImgSliderDirective.prototype.init = function () {
            this.restrict = 'E';
            this.replace = true;
            this.templateUrl = '/assets/html/imgSlider.html';
            this.scope = {
                sliderId: '=',
                contents: '=',
                contentDispSize: '=',
                contentWidth: '=',
                contentScale: '=',
                contentPadding: '=',
                imageMargin: '=',
                displayScrollButton: '=',
                scrollButtonTop: '=',
                scrollButtonWidth: '=',
                scrollButtonMarginFromEdge: '=',
                scrollButtonScale: '=',
                displayImageName: '=',
                imageNameFontSize: '=',
                imageNameMarginTop: '=',
                width: '=',
                height: '=',
                activationTrigger: '=',
                autoPlay: '=',
                autoPlayDirection: '=',
                autoPlayInterval: '='
            };
            this.controller = ['$scope', '$timeout', '$interval', ImgSliderController];
            this.controllerAs = 'imgSliderCtrl';
            this.link = function (scope, element, attrs) {
            };
        };
        return ImgSliderDirective;
    }());
    memecApp.ImgSliderDirective = ImgSliderDirective;
    var ImgSliderController = (function () {
        function ImgSliderController($scope, $timeout, $interval) {
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.$interval = $interval;
        }
        ImgSliderController.prototype.init = function () {
            var _this = this;
            this.sliderId = this.$scope.sliderId;
            this.isInAnimation = false;
            this.imgSlider = new ImgSlider(this.$scope, this.$scope.contentDispSize, this.$scope.contents);
            this.autoPlayConfig = {
                isActive: this.$scope.autoPlay,
                direction: this.$scope.autoPlayDirection,
                interval: this.$scope.autoPlayInterval
            };
            this.$scope.$watch(function () {
                return _this.$scope.contents.length;
            }, function (newValue, oldValue) {
                _this.imgSlider.init();
                _this.initPosition();
                _this.pause();
                if (_this.$scope.activationTrigger)
                    _this.autoPlay(_this.autoPlayConfig);
            });
            this.$scope.$watch(function () {
                return _this.$scope.activationTrigger;
            }, function (newValue, oldValue) {
                _this.$timeout(function () {
                    _this.initPosition();
                    _this.pause();
                    if (newValue)
                        _this.autoPlay(_this.autoPlayConfig);
                });
            });
        };
        ImgSliderController.prototype.swipeLeft = function () {
            if (!this.imgSlider.canSwipe())
                return;
            if (this.isInAnimation)
                return;
            this.pause();
            this.imgSlider.addPanel(this.imgSlider.directionRight);
            this.imgSlider.deletePanel(this.imgSlider.directionLeft);
            this.placeScrollStartPosition(this.imgSlider.directionRight);
            this.moveTo(this.imgSlider.directionRight);
            this.autoPlay(this.autoPlayConfig);
        };
        ImgSliderController.prototype.swipeRight = function () {
            if (!this.imgSlider.canSwipe())
                return;
            if (this.isInAnimation)
                return;
            this.pause();
            this.imgSlider.addPanel(this.imgSlider.directionLeft);
            this.imgSlider.deletePanel(this.imgSlider.directionRight);
            this.placeScrollStartPosition(this.imgSlider.directionLeft);
            this.moveTo(this.imgSlider.directionLeft);
            this.autoPlay(this.autoPlayConfig);
        };
        ImgSliderController.prototype.autoPlay = function (autoPlayConfig) {
            var _this = this;
            if (!autoPlayConfig.isActive)
                return;
            if (autoPlayConfig.direction !== this.imgSlider.directionLeft
                && autoPlayConfig.direction !== this.imgSlider.directionRight) {
                throw Error('invalid auto play direction.');
            }
            var autoPlayAction = autoPlayConfig.direction === this.imgSlider.directionLeft ? function () { return _this.swipeLeft(); } : function () { return _this.swipeRight(); };
            this.sequencer = this.$interval(autoPlayAction, autoPlayConfig.interval);
        };
        ImgSliderController.prototype.fetchScrollBody = function () {
            return $("[slider-id = '" + this.sliderId + "']").find('.imgSliderScroll');
        };
        ImgSliderController.prototype.fetchSliderWidth = function () {
            return $("[slider-id = '" + this.sliderId + "']").find('.imgSlider').width();
        };
        ImgSliderController.prototype.initPosition = function () {
            var target = this.fetchScrollBody();
            target.scrollLeft(this.fetchSliderWidth());
        };
        ImgSliderController.prototype.moveTo = function (direction) {
            var _this = this;
            var target = this.fetchScrollBody();
            var pos = this.fetchSliderWidth();
            this.isInAnimation = true;
            target.animate({
                scrollLeft: pos + 'px'
            }, {
                complete: function () {
                    _this.isInAnimation = false;
                }
            });
        };
        ImgSliderController.prototype.pause = function () {
            if (this.sequencer)
                this.$interval.cancel(this.sequencer);
        };
        ImgSliderController.prototype.placeScrollStartPosition = function (direction) {
            var target = this.fetchScrollBody();
            target.scrollLeft(this.fetchSliderWidth() * (1 - direction));
        };
        return ImgSliderController;
    }());
    memecApp.ImgSliderController = ImgSliderController;
    var ImgSlider = (function () {
        function ImgSlider($scope, contentDispSize, contents) {
            this.$scope = $scope;
            this.contents = [];
            this.directionLeft = -1;
            this.directionRight = 1;
            this.panels = [];
            this.contents = contents;
            this.contentDispSize = contentDispSize;
        }
        ImgSlider.prototype.init = function () {
            this.canSwipeFlg = true;
            this.panels = [];
            this.leftContentsStartIndex = 0;
            this.rightContentsStartIndex = 0;
            this.initPanel();
        };
        ImgSlider.prototype.initPanel = function () {
            var firstPanelIndices = this.fetchPanelIndices(this.leftContentsStartIndex);
            if (this.contents.length <= this.contentDispSize) {
                this.canSwipeFlg = false;
                firstPanelIndices = this.createSequence(this.contents.length);
            }
            var panel = new ImgSliderPanel(firstPanelIndices);
            this.panels.push(panel);
            this.addPanel(this.directionLeft);
            this.addPanel(this.directionRight);
        };
        ImgSlider.prototype.addPanel = function (direction) {
            if (direction === this.directionLeft) {
                this.bindNextLeftContentsStartIndex(this.directionLeft);
                var panel = new ImgSliderPanel(this.fetchPanelIndices(this.leftContentsStartIndex));
                this.panels.unshift(panel);
            }
            else {
                this.bindNextRightContentsStartIndex(this.directionRight);
                var panel = new ImgSliderPanel(this.fetchPanelIndices(this.rightContentsStartIndex));
                this.panels.push(panel);
            }
        };
        ImgSlider.prototype.canSwipe = function () {
            return this.canSwipeFlg;
        };
        ImgSlider.prototype.deletePanel = function (direction) {
            if (direction === this.directionLeft) {
                this.panels.shift();
                this.bindNextLeftContentsStartIndex(this.directionRight);
            }
            else {
                this.panels.pop();
                this.bindNextRightContentsStartIndex(this.directionLeft);
            }
        };
        ImgSlider.prototype.bindNextLeftContentsStartIndex = function (moveDirection) {
            var nextIndex = this.leftContentsStartIndex + moveDirection * this.contentDispSize;
            if (nextIndex < 0) {
                nextIndex = this.contents.length + nextIndex;
            }
            if (this.contents.length <= nextIndex) {
                nextIndex = nextIndex - this.contents.length;
            }
            this.leftContentsStartIndex = nextIndex;
        };
        ImgSlider.prototype.bindNextRightContentsStartIndex = function (moveDirection) {
            var nextIndex = this.rightContentsStartIndex + moveDirection * this.contentDispSize;
            if (nextIndex < 0) {
                nextIndex = this.contents.length + nextIndex;
            }
            if (this.contents.length <= nextIndex) {
                nextIndex = nextIndex - this.contents.length;
            }
            this.rightContentsStartIndex = nextIndex;
        };
        ImgSlider.prototype.createSequence = function (length) {
            var sequence = [];
            for (var i = 0; i < length; i++) {
                sequence.push(i);
            }
            return sequence;
        };
        ImgSlider.prototype.fetchPanelIndices = function (startIndex) {
            var indices = [];
            for (var i = startIndex; i < startIndex + this.contentDispSize; i++) {
                if (this.contents.length <= i) {
                    indices.push(i - this.contents.length);
                }
                else {
                    indices.push(i);
                }
            }
            return indices;
        };
        return ImgSlider;
    }());
    memecApp.ImgSlider = ImgSlider;
    var ImgSliderPanel = (function () {
        function ImgSliderPanel(contents) {
            this.contents = [];
            this.contents = contents;
        }
        return ImgSliderPanel;
    }());
    memecApp.ImgSliderPanel = ImgSliderPanel;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CategoryListDirective = (function () {
        function CategoryListDirective() {
            this.templateUrl = '/assets/html/categoryList.html';
            this.scope = {
                groupId: '=',
                categoryId: '='
            };
            this.controller = ['$scope', 'APP_CONF', 'CategoryResource', CategoryListController];
            this.controllerAs = 'categoryListCtrl';
        }
        return CategoryListDirective;
    }());
    memecApp.CategoryListDirective = CategoryListDirective;
    var CategoryListController = (function () {
        function CategoryListController($scope, APP_CONF, CategoryResource) {
            var _this = this;
            this.$scope = $scope;
            this.APP_CONF = APP_CONF;
            this.CategoryResource = CategoryResource;
            this.isDisplayList = false;
            this.categoryHistory = {};
            this.LEVEL = {
                FIRST: 1,
                SECOND: 2,
                THIRD: 3
            };
            this.ACTION = {
                INIT: 'INIT',
                CHANGE: 'CHANGE'
            };
            this.groupId = $scope['groupId'];
            this.categoryId = $scope['categoryId'];
            var judgeDvdOrCd = function (categoryId, categoryName) {
                var dvdCategoryId = _this.APP_CONF.categoryIdList[_this.groupId].dvd;
                var cdCategoryId = _this.APP_CONF.categoryIdList[_this.groupId].cd;
                _this.isDisplayList = categoryId === dvdCategoryId || categoryId === cdCategoryId;
                if (!_this.isDisplayList)
                    return;
                _this.topCategoryId = categoryId;
                _this.topCategoryName = categoryName;
                _this.setParentList();
            };
            var fetchParentCategoryID = function (categoryId, callback) {
                var notExist = 0;
                _this.CategoryResource.get({
                    id: categoryId,
                    recursive: true,
                    level: _this.LEVEL.FIRST
                }).$promise.then(function (category) {
                    _this.categoryHistory[category.level] = category.id;
                    if (category.parent_id === notExist) {
                        callback(category.id, category.name);
                    }
                    else {
                        fetchParentCategoryID(category.parent_id, callback);
                    }
                })
                    .catch(function (error) {
                    callback(notExist, '');
                });
            };
            fetchParentCategoryID(this.categoryId, judgeDvdOrCd);
        }
        CategoryListController.prototype.setParentList = function () {
            var _this = this;
            this.CategoryResource.get({
                id: this.topCategoryId,
                recursive: true,
                level: this.LEVEL.FIRST
            }).$promise.then(function (category) {
                _this.parentList = [{ value: _this.topCategoryId, name: '全てのジャンル' }];
                var listContent = category.children.map(function (element, index, array) {
                    return { value: element.id, name: element.name };
                });
                _this.parentList = _this.parentList.concat(listContent);
                _this.selectedParent = _this.categoryHistory[_this.LEVEL.SECOND] || _this.categoryHistory[_this.LEVEL.FIRST];
                _this.setChildList(_this.ACTION.INIT);
            }).catch(angular.noop);
        };
        CategoryListController.prototype.setChildList = function (action) {
            var _this = this;
            this.CategoryResource.get({
                id: this.selectedParent,
                recursive: true,
                level: this.LEVEL.FIRST
            }).$promise.then(function (category) {
                if (category.level > _this.LEVEL.FIRST) {
                    _this.childList = [{ value: _this.selectedParent, name: '全ての商品' }];
                    var listContent = category.children.map(function (element, index, array) {
                        return { value: element.id, name: element.name };
                    });
                    _this.childList = _this.childList.concat(listContent);
                }
                else {
                    _this.childList = [{ value: _this.selectedParent, name: 'ジャンルを選んでください' }];
                }
                _this.setSelectedChild(action);
            }).catch(angular.noop);
        };
        CategoryListController.prototype.search = function () {
            location.href = '/selection/list/' + this.selectedChild;
        };
        CategoryListController.prototype.setSelectedChild = function (action) {
            switch (action) {
                case this.ACTION.INIT:
                    this.selectedChild = this.categoryHistory[this.LEVEL.THIRD]
                        || this.categoryHistory[this.LEVEL.SECOND]
                        || this.categoryHistory[this.LEVEL.FIRST];
                    break;
                case this.ACTION.CHANGE:
                    this.selectedChild = this.selectedParent;
                    break;
            }
        };
        return CategoryListController;
    }());
    memecApp.CategoryListController = CategoryListController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ThreeImageSliderDirective = (function () {
        function ThreeImageSliderDirective() {
            return this.CreateDirective();
        }
        ThreeImageSliderDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    var sectionId = element.parent().parent().attr('id');
                    var threeImageSliderContents = $("#" + sectionId).find('.threeImageSliderContents');
                    if (scope.$last && (threeImageSliderContents.find('li')).length > 1) {
                        setTimeout(function () {
                            threeImageSliderContents.bxSlider({
                                useCSS: false,
                                auto: true,
                                pause: 4000
                            });
                        }, 0);
                    }
                }
            };
        };
        return ThreeImageSliderDirective;
    }());
    memecApp.ThreeImageSliderDirective = ThreeImageSliderDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var IzoneBannerSliderDirective = (function () {
        function IzoneBannerSliderDirective() {
            return this.CreateDirective();
        }
        IzoneBannerSliderDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    if (scope.$last) {
                        setTimeout(function () {
                            $('.izoneBannerSlider').slick({
                                infinite: true,
                                dots: true,
                                centerMode: true,
                                slidesToShow: 1,
                                centerPadding: '30%',
                                arrows: false,
                                autoplay: true,
                                responsive: [
                                    {
                                        breakpoint: 600,
                                        settings: {
                                            centerPadding: '10%',
                                        }
                                    },
                                    {
                                        breakpoint: 960,
                                        settings: {
                                            centerPadding: '20%',
                                        }
                                    },
                                    {
                                        breakpoint: 1280,
                                        settings: {
                                            centerPadding: '30%',
                                        }
                                    },
                                    {
                                        breakpoint: 1600,
                                        settings: {
                                            centerPadding: '30%',
                                        }
                                    }
                                ]
                            });
                        }, 0);
                    }
                }
            };
        };
        return IzoneBannerSliderDirective;
    }());
    memecApp.IzoneBannerSliderDirective = IzoneBannerSliderDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MeResource = (function () {
        function MeResource($resource) {
            return $resource('/api/v1/me', {}, {
                get: { method: 'GET', cache: true }
            });
        }
        return MeResource;
    }());
    memecApp.MeResource = MeResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var OrderResource = (function () {
        function OrderResource($resource) {
            return $resource('/api/v1/orders/:orderId', { orderId: '@orderId' }, {});
        }
        return OrderResource;
    }());
    memecApp.OrderResource = OrderResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CatalogResource = (function () {
        function CatalogResource($resource) {
            return $resource('/api/v1/catalogs/:category', { category: '@category' });
        }
        return CatalogResource;
    }());
    memecApp.CatalogResource = CatalogResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var DebugHttpsResource = (function () {
        function DebugHttpsResource($resource) {
            return $resource('https://' + location.host + '/api/v0/debughttps', {}, {
                update: { method: 'PUT', isArray: true, withCredentials: true }
            });
        }
        return DebugHttpsResource;
    }());
    memecApp.DebugHttpsResource = DebugHttpsResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var LineBreakFilter = (function () {
        function LineBreakFilter() {
        }
        LineBreakFilter.filter = function ($sce) {
            return function (input, exp) {
                return $sce.trustAsHtml(input.replace(/\n/g, '<br>'));
            };
        };
        LineBreakFilter.$inject = ['$sce'];
        return LineBreakFilter;
    }());
    memecApp.LineBreakFilter = LineBreakFilter;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TrustSrcFilter = (function () {
        function TrustSrcFilter() {
        }
        TrustSrcFilter.filter = function ($sce) {
            return function (input, exp) {
                return $sce.trustAsResourceUrl(input);
            };
        };
        TrustSrcFilter.$inject = ['$sce'];
        return TrustSrcFilter;
    }());
    memecApp.TrustSrcFilter = TrustSrcFilter;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TrustHtmlFilter = (function () {
        function TrustHtmlFilter() {
        }
        TrustHtmlFilter.filter = function ($sce) {
            return function (input, exp) {
                return $sce.trustAsHtml(input);
            };
        };
        TrustHtmlFilter.$inject = ['$sce'];
        return TrustHtmlFilter;
    }());
    memecApp.TrustHtmlFilter = TrustHtmlFilter;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var EventNoToStrFilter = (function () {
        function EventNoToStrFilter() {
        }
        EventNoToStrFilter.filter = function () {
            return function (input, exp) {
                return isFinite(input) ? '【第' + input + '次申込】' : '【' + input + '申込】';
            };
        };
        return EventNoToStrFilter;
    }());
    memecApp.EventNoToStrFilter = EventNoToStrFilter;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var LoginValidationService = (function () {
        function LoginValidationService() {
        }
        LoginValidationService.prototype.validateUserId = function (userId) {
            if (!userId) {
                return 'IDを入力して下さい。';
            }
            return '';
        };
        LoginValidationService.prototype.validatePassword = function (password) {
            if (!password) {
                return 'パスワードを入力して下さい。';
            }
            return '';
        };
        return LoginValidationService;
    }());
    memecApp.LoginValidationService = LoginValidationService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ConfService = (function () {
        function ConfService() {
        }
        ConfService.value = {
            resourceUrl: '',
            electedUrl: '',
            lotteryUrl: '',
            fukubukuroLpUrl: '',
            veritransTokenApiKey: '',
            groupId: 12,
            officialSiteURL: {
                akb: 'http://www.akb48.co.jp/',
                ske: 'http://www.ske48.co.jp/',
                nmb: 'http://www.nmb48.com/',
                hkt: 'http://www.hkt48.jp/',
                ngt: 'http://ngt48.jp/',
                jkt: 'http://www.jkt48.com/',
                stu: 'http://www.stu48.com/'
            },
            passResetUrl: 'https://member.izone-official.com/passreset?client_id=HyHdYkn4bBFJkAFZcGsScJjKHXFZViNHK8uZ78qt',
            userIdRemindUrl: 'https://member.izone-official.com/idremind?client_id=HyHdYkn4bBFJkAFZcGsScJjKHXFZViNHK8uZ78qt',
            memberRegUrl: 'https://member.izone-official.com/signup?client_id=HyHdYkn4bBFJkAFZcGsScJjKHXFZViNHK8uZ78qt',
            memberLoginUrl: 'https://member.izone-official.com/profile/mail?client_id=HyHdYkn4bBFJkAFZcGsScJjKHXFZViNHK8uZ78qt',
            inquiryUrl: 'https://member.izone-official.com/contact/',
            zipcodeUrl: '//www.post.japanpost.jp/zipcode/',
            twitterUrl: 'https://twitter.com/official_izone',
            goodsinquiryUrl: 'https://official-goods-store.jp/izone/inquiry',
            leadRegistrationUri: '/site-info/registration',
            groupIdList: {
                100: 'all',
                1: 'akb',
                2: 'ske',
                3: 'hkt',
                4: 'nmb',
                5: 'ngt'
            },
            categoryIdList: {
                1: {
                    goods: 1,
                    photo: 3,
                    dvd: 4,
                    cd: 1409
                },
                2: {
                    goods: 124,
                    photo: 126,
                    dvd: 127,
                    cd: 1432
                },
                3: {
                    goods: 243,
                    photo: 245,
                    dvd: 246,
                    cd: 1448
                },
                4: {
                    goods: 480,
                    photo: 506,
                    dvd: 536,
                    cd: 2770
                },
                5: {
                    goods: 1942,
                    photo: 1941,
                    dvd: 1940,
                    cd: 2149
                }
            },
            permitFcList: {
                Nihombashira: '二本柱の会 会員',
                HKT48_mobile: 'HKT48モバイル会員',
                SKE48_mobile: 'SKE48モバイル会員'
            },
            error: {
                1: '在庫がないのでカートに追加されませんでした。',
                2: '在庫が不足しているため、在庫分のみカートに追加しました。',
                3: '指定した商品は現在登録されていません。',
                4: 'まとめ買いの最低購入数に足りません。',
                5: '販売期限を過ぎた為カートに追加されませんでした。',
                6: 'こちらの商品は販売制限をしております。制限を超える購入はできません。'
            },
            scrollToTopButtonImagePath: 'memec/image/top/scroll_to_top_button',
            scrollToTopButtonImageName: {
                0: 'top.png',
                1: 'akb48.png',
                2: 'ske48.png',
                3: 'hkt48.png',
                4: 'nmb48.png',
                5: 'ngt48.png'
            }
        };
        return ConfService;
    }());
    memecApp.ConfService = ConfService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ModalBannerService = (function () {
        function ModalBannerService(ModalBannerResource, UtilService, $cookies, $uibModal) {
            this.ModalBannerResource = ModalBannerResource;
            this.UtilService = UtilService;
            this.$cookies = $cookies;
            this.$uibModal = $uibModal;
        }
        ModalBannerService.prototype.run = function (groupId) {
            var _this = this;
            if (this.UtilService.isSmartphone())
                return;
            this.ModalBannerResource.get({ group_id: groupId })
                .$promise.then(function (data) {
                var config = data;
                if (!config.isRunning)
                    return;
                var cookie = _this.getCookie(config.cookieName);
                var thisDisplayCount = _this.figureThisDisplayCount(cookie, config.updatedAt);
                if (thisDisplayCount > config.displayLimits)
                    return;
                _this.setCookie(config.cookieName, config.updatedAt, thisDisplayCount, config.cookieAge);
                var contentNo = _this.figureContentNo(config, thisDisplayCount);
                _this.showModal(config.viewContents[contentNo]);
            }).catch(angular.noop);
        };
        ModalBannerService.prototype.figureThisDisplayCount = function (cookie, thisUpdatedAt) {
            if (!cookie || cookie.updatedAt !== thisUpdatedAt)
                return 1;
            return cookie.displayCount + 1;
        };
        ModalBannerService.prototype.figureContentNo = function (config, thisDisplayCount) {
            if (config.isRandomDisplay)
                return Math.floor(Math.random() * config.viewContents.length);
            var contentNo = thisDisplayCount - 1;
            if (!config.viewContents[contentNo])
                contentNo = config.viewContents.length - 1;
            return contentNo;
        };
        ModalBannerService.prototype.getCookie = function (cookieName) {
            var cookie = this.$cookies.get(cookieName);
            if (!cookie)
                return null;
            var _a = cookie.split(','), updatedAt = _a[0], displayCount = _a[1];
            return {
                updatedAt: updatedAt,
                displayCount: Number(displayCount)
            };
        };
        ModalBannerService.prototype.setCookie = function (cookieName, updatedAt, displayCount, cookieAge) {
            var expires = new Date();
            expires.setDate(expires.getDate() + cookieAge);
            this.$cookies.put(cookieName, updatedAt + "," + displayCount, {
                'path': '/',
                expires: expires
            });
        };
        ModalBannerService.prototype.showModal = function (viewContents) {
            this.modalInstance = this.$uibModal.open({
                controller: 'ModalBannerController as ctrl',
                templateUrl: '/assets/html/modalBanner.html',
                windowClass: 'centeringModal',
                backdrop: 'true',
                resolve: {
                    viewContents: function () {
                        return viewContents;
                    }
                }
            });
            this.modalInstance.result.catch(angular.noop);
        };
        return ModalBannerService;
    }());
    memecApp.ModalBannerService = ModalBannerService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ModalBannerResource = (function () {
        function ModalBannerResource($resource) {
            return $resource('/api/v1/modal-banners');
        }
        return ModalBannerResource;
    }());
    memecApp.ModalBannerResource = ModalBannerResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var VeritransTokenResource = (function () {
        function VeritransTokenResource($resource) {
            return $resource('https://api.veritrans.co.jp/4gtoken');
        }
        return VeritransTokenResource;
    }());
    memecApp.VeritransTokenResource = VeritransTokenResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CategoryProductResource = (function () {
        function CategoryProductResource($resource) {
            return $resource('/api/v1/categories/:id/products', { id: '@id' });
        }
        return CategoryProductResource;
    }());
    memecApp.CategoryProductResource = CategoryProductResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var NewsController = (function () {
        function NewsController(APP_CONF, NewsResource) {
            this.APP_CONF = APP_CONF;
            this.NewsResource = NewsResource;
            this.moreFlg = false;
            this.dispFlg = false;
            this.listDispFlg = true;
            this.listDispNum = 10;
            this.dispNewDate = new Date();
            this.dispNewDate.setDate(this.dispNewDate.getDate() - 7);
        }
        NewsController.prototype.init = function (id) {
            var _this = this;
            if (id === void 0) { id = 0; }
            this.newsList = this.NewsResource.query({ group_id: this.APP_CONF.groupId });
            this.newsList.$promise.then(function () {
                if (id > 0) {
                    _this.news = _this.newsList.filter(function (news) {
                        return news.id === id;
                    })[0];
                }
                _this.dispFlg = true;
            });
        };
        NewsController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        NewsController.prototype.toggleNews = function () {
            this.moreFlg = !this.moreFlg;
        };
        NewsController.prototype.viewMore = function () {
            this.listDispNum = this.listDispNum + 10;
            if (this.listDispNum >= this.newsList.length) {
                this.listDispFlg = false;
            }
        };
        return NewsController;
    }());
    memecApp.NewsController = NewsController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TopController = (function () {
        function TopController(APP_CONF, UtilService, NewsResource, BannerService, ModalBannerService) {
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.NewsResource = NewsResource;
            this.BannerService = BannerService;
            this.ModalBannerService = ModalBannerService;
            this.moreFlg = false;
            this.NewsSize = 5;
            this.homeDispFlg = false;
            this.newsDispFlg = false;
            this.goodsDispFlg = false;
            this.photoDispFlg = false;
            this.dvdDispFlg = false;
            this.cdDispFlg = false;
            this.isSmartphone = this.UtilService.isSmartphone();
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.groupIdList = this.APP_CONF.groupIdList;
            this.dispNewDate = new Date();
            this.dispNewDate.setDate(this.dispNewDate.getDate() - 7);
        }
        TopController.prototype.init = function (groupId) {
            var _this = this;
            this.ModalBannerService.run(groupId);
            this.groupId = groupId;
            if (groupId !== 0) {
                this.categoryIdList = this.APP_CONF.categoryIdList[groupId];
            }
            this.BannerService.fetchBannerList(groupId, 'home', 'main', function (data) {
                _this.homeBannerList = _this.filterUnsetData(data);
                _this.homeDispFlg = true;
            });
            this.newsList = this.NewsResource.query({ group_id: groupId });
            this.newsList.$promise.then(function () {
                _this.newsDispFlg = true;
            });
            this.BannerService.fetchBannerList(groupId, 'home', 'goods', function (data) {
                _this.goodsBannerList = _this.filterUnsetData(data);
                _this.goodsDispFlg = true;
            });
            this.BannerService.fetchBannerList(groupId, 'home', 'photo', function (data) {
                _this.photoBannerList = _this.filterUnsetData(data);
                _this.photoDispFlg = true;
            });
            this.BannerService.fetchBannerList(groupId, 'dvd', 'main', function (data) {
                _this.dvdBannerList = _this.filterUnsetData(data);
                _this.dvdDispFlg = true;
            });
            this.BannerService.fetchBannerList(groupId, 'cd', 'main', function (data) {
                _this.cdBannerList = _this.filterUnsetData(data);
                _this.cdDispFlg = true;
            });
            this.BannerService.fetchBannerList(groupId, 'home', 'top', function (data) {
                _this.sideTopBannerList = data;
            });
            this.BannerService.fetchBannerList(groupId, 'home', 'bottom', function (data) {
                _this.sideBottomBannerList = data;
            });
        };
        TopController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        TopController.prototype.toggleNews = function () {
            this.moreFlg = !this.moreFlg;
        };
        TopController.prototype.filterUnsetData = function (data) {
            return Object.keys(data)
                .map(function (key) { return data[key]; })
                .filter(function (content) { return !!content.imgurl_pc; });
        };
        return TopController;
    }());
    memecApp.TopController = TopController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SliderController = (function () {
        function SliderController(APP_CONF, BannerService) {
            this.APP_CONF = APP_CONF;
            this.BannerService = BannerService;
            this.bannerDomain = this.APP_CONF.resourceUrl;
        }
        SliderController.prototype.init = function () {
            var _this = this;
            this.BannerService.fetchBannerList(this.APP_CONF.groupId, 'home', 'main', function (data) {
                angular.forEach(data, function (value, key) {
                    if (value.url_pc_targetblank === "" || value.imgurl_pc === "") {
                        delete data[key];
                    }
                });
                _this.homeBannerList = data;
            });
        };
        return SliderController;
    }());
    memecApp.SliderController = SliderController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TopPreviewController = (function () {
        function TopPreviewController(CategoryResource, CategoryProductResource) {
            var _this = this;
            this.CategoryResource = CategoryResource;
            this.CategoryProductResource = CategoryProductResource;
            this.categoryIds = [];
            this.targetIds = [];
            this.productList = [];
            this.isAddingProducts = false;
            this.wasFetchedAllProduct = false;
            this.CategoryResource.get({ id: 2841, recursive: false, level: 1 }).$promise.then(function (data) {
                _this.categoryIds = data.children.map(function (category) {
                    return category.id;
                });
                _this.fetchNext();
            }).catch(angular.noop);
        }
        TopPreviewController.prototype.fetchNext = function () {
            for (var i = 0; i < 1; i++) {
                if (this.categoryIds.length === 0) {
                    break;
                }
                this.targetIds.push(this.categoryIds.shift());
            }
            this.fetchProducts();
        };
        TopPreviewController.prototype.fetchProducts = function () {
            var _this = this;
            if (this.isAddingProducts || this.wasFetchedAllProduct || this.targetIds.length === 0) {
                return;
            }
            this.isAddingProducts = true;
            var categoryId = this.targetIds.shift();
            setTimeout(function () {
                _this.CategoryProductResource.get({ id: categoryId, size: 48, from: 0 }).$promise.then(function (data) {
                    var fetched = angular.copy(data.hits);
                    for (var _i = 0, fetched_1 = fetched; _i < fetched_1.length; _i++) {
                        var productAddition = fetched_1[_i];
                        _this.productList.push(productAddition);
                    }
                    if (_this.targetIds.length === 0 && _this.categoryIds.length === 0) {
                        _this.wasFetchedAllProduct = true;
                    }
                    _this.isAddingProducts = false;
                    _this.fetchProducts();
                }).catch(angular.noop);
            }, 1000);
        };
        return TopPreviewController;
    }());
    memecApp.TopPreviewController = TopPreviewController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var NewsResource = (function () {
        function NewsResource($resource) {
            return $resource('/api/v1/news');
        }
        return NewsResource;
    }());
    memecApp.NewsResource = NewsResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var AccordionDirective = (function () {
        function AccordionDirective() {
            return this.CreateDirective();
        }
        AccordionDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    if (scope.$last) {
                        $('.accordion_dl dd').hide();
                        $('.accordion_dl dt').unbind('click');
                        $('.accordion_dl dt').click(function () {
                            $(this).toggleClass("active");
                            $(this).siblings("dt").removeClass("active");
                            $(this).next("dd").slideToggle();
                            $(this).next("dd").siblings("dd").slideUp();
                        });
                    }
                }
            };
        };
        return AccordionDirective;
    }());
    memecApp.AccordionDirective = AccordionDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MemberSliderDirective = (function () {
        function MemberSliderDirective() {
            return this.CreateDirective();
        }
        MemberSliderDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    if (scope.$parent.$last && scope.$last) {
                        setTimeout(function () {
                            $('.menberslider').bxSlider({
                                slideWidth: 60,
                                minSlides: 1,
                                maxSlides: 4,
                                slideMargin: 10,
                                useCSS: false
                            });
                        }, 0);
                    }
                }
            };
        };
        return MemberSliderDirective;
    }());
    memecApp.MemberSliderDirective = MemberSliderDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TopSliderDirective = (function () {
        function TopSliderDirective() {
            return this.CreateDirective();
        }
        TopSliderDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    if (scope.$last) {
                        setTimeout(function () {
                            var $setElm = $('.wideslider'), baseWidth = 1180, baseHeight = 418, slideSpeed = 500, delayTime = 5000, easing = 'linear', autoPlay = '1', btnOpacity = 0.5, pnOpacity = 0.5;
                            $setElm.each(function () {
                                var targetObj = $(this);
                                var widesliderWidth = baseWidth;
                                var widesliderHeight = baseHeight;
                                var wsSetTimer;
                                targetObj.children('ul').wrapAll('<div class="wideslider_base"><div class="wideslider_wrap"></div><div class="slider_prev"></div><div class="slider_next"></div></div>');
                                var findBase = targetObj.find('.wideslider_base');
                                var findWrap = targetObj.find('.wideslider_wrap');
                                var findPrev = targetObj.find('.slider_prev');
                                var findNext = targetObj.find('.slider_next');
                                var baseListWidth = baseWidth;
                                var baseListCount = findWrap.children('ul').children('li').length;
                                var baseWrapWidth = (baseListWidth) * (baseListCount);
                                var pagination = $('<div class="pagination"></div>');
                                targetObj.append(pagination);
                                var baseList = findWrap.children('ul').children('li');
                                baseList.each(function (i) {
                                    $(this).css({ width: (baseWidth), height: (baseHeight) });
                                    pagination.append('<a href="javascript:void(0);" class="pn' + (i + 1) + '"></a>');
                                });
                                var pnPoint = pagination.children('a');
                                var pnFirst = pagination.children('a:first');
                                var pnLast = pagination.children('a:last');
                                var pnCount = pagination.children('a').length;
                                pnPoint.css({ opacity: (pnOpacity) }).hover(function () {
                                    $(this).stop().animate({ opacity: '1' }, 300);
                                }, function () {
                                    $(this).stop().animate({ opacity: (pnOpacity) }, 300);
                                });
                                pnFirst.addClass('active');
                                pnPoint.click(function () {
                                    if (autoPlay == '1') {
                                        clearInterval(wsSetTimer);
                                    }
                                    var setNum = pnPoint.index(this);
                                    var moveLeft = ((baseListWidth) * (setNum)) + baseWrapWidth;
                                    findWrap.stop().animate({ left: -(moveLeft) }, slideSpeed, easing);
                                    pnPoint.removeClass('active');
                                    $(this).addClass('active');
                                    if (autoPlay == '1') {
                                        wsTimer();
                                    }
                                });
                                var makeClone = findWrap.children('ul');
                                makeClone.clone().prependTo(findWrap);
                                makeClone.clone().appendTo(findWrap);
                                var allListWidth = findWrap.children('ul').children('li').width();
                                var allListCount = findWrap.children('ul').children('li').length;
                                var allLWrapWidth = (allListWidth) * (allListCount);
                                var windowWidth = $(window).width();
                                var posAdjust = ((windowWidth) - (baseWidth)) / 2;
                                findBase.css({ left: (posAdjust), width: (baseWidth), height: (baseHeight) });
                                findPrev.css({
                                    left: -(baseWrapWidth),
                                    width: (baseWrapWidth),
                                    height: (baseHeight),
                                    opacity: (btnOpacity)
                                });
                                findNext.css({
                                    right: -(baseWrapWidth),
                                    width: (baseWrapWidth),
                                    height: (baseHeight),
                                    opacity: (btnOpacity)
                                });
                                $(window).bind('resize', function () {
                                    var windowWidth = $(window).width();
                                    var posAdjust = ((windowWidth) - (baseWidth)) / 2;
                                    findBase.css({ left: (posAdjust) });
                                    findPrev.css({ left: -(posAdjust), width: (posAdjust) });
                                    findNext.css({ right: -(posAdjust), width: (posAdjust) });
                                }).resize();
                                findWrap.css({ left: -(baseWrapWidth), width: (allLWrapWidth), height: (baseHeight) });
                                findWrap.children('ul').css({ width: (baseWrapWidth), height: (baseHeight) });
                                var posResetNext = -(baseWrapWidth) * 2;
                                var posResetPrev = -(baseWrapWidth) + (baseWidth);
                                if (autoPlay == '1') {
                                    wsTimer();
                                }
                                function wsTimer() {
                                    wsSetTimer = setInterval(function () {
                                        findNext.click();
                                    }, delayTime);
                                }
                                findNext.click(function () {
                                    findWrap.not(':animated').each(function () {
                                        if (autoPlay == '1') {
                                            clearInterval(wsSetTimer);
                                        }
                                        var posLeft = parseInt($(findWrap).css('left'));
                                        var moveLeft = ((posLeft) - (baseWidth));
                                        findWrap.stop().animate({ left: (moveLeft) }, slideSpeed, easing, function () {
                                            var adjustLeft = parseInt($(findWrap).css('left'));
                                            if (adjustLeft == posResetNext) {
                                                findWrap.css({ left: -(baseWrapWidth) });
                                            }
                                        });
                                        var pnPointActive = pagination.children('a.active');
                                        pnPointActive.each(function () {
                                            var pnIndex = pnPoint.index(this);
                                            var listCount = pnIndex + 1;
                                            if (pnCount == listCount) {
                                                pnPointActive.removeClass('active');
                                                pnFirst.addClass('active');
                                            }
                                            else {
                                                pnPointActive.removeClass('active').next().addClass('active');
                                            }
                                        });
                                        if (autoPlay == '1') {
                                            wsTimer();
                                        }
                                    });
                                }).hover(function () {
                                    $(this).stop().animate({ opacity: ((btnOpacity) + 0.1) }, 100);
                                }, function () {
                                    $(this).stop().animate({ opacity: (btnOpacity) }, 100);
                                });
                                findPrev.click(function () {
                                    findWrap.not(':animated').each(function () {
                                        if (autoPlay == '1') {
                                            clearInterval(wsSetTimer);
                                        }
                                        var posLeft = parseInt($(findWrap).css('left'));
                                        var moveLeft = ((posLeft) + (baseWidth));
                                        findWrap.stop().animate({ left: (moveLeft) }, slideSpeed, easing, function () {
                                            var adjustLeft = parseInt($(findWrap).css('left'));
                                            var adjustLeftPrev = (posResetNext) + (baseWidth);
                                            if (adjustLeft == posResetPrev) {
                                                findWrap.css({ left: (adjustLeftPrev) });
                                            }
                                        });
                                        var pnPointActive = pagination.children('a.active');
                                        pnPointActive.each(function () {
                                            var pnIndex = pnPoint.index(this);
                                            var listCount = pnIndex + 1;
                                            if (1 == listCount) {
                                                pnPointActive.removeClass('active');
                                                pnLast.addClass('active');
                                            }
                                            else {
                                                pnPointActive.removeClass('active').prev().addClass('active');
                                            }
                                        });
                                        if (autoPlay == '1') {
                                            wsTimer();
                                        }
                                    });
                                }).hover(function () {
                                    $(this).stop().animate({ opacity: ((btnOpacity) + 0.1) }, 100);
                                }, function () {
                                    $(this).stop().animate({ opacity: (btnOpacity) }, 100);
                                });
                            });
                        }, 0);
                    }
                }
            };
        };
        return TopSliderDirective;
    }());
    memecApp.TopSliderDirective = TopSliderDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var FloatingAnimationLinkDirective = (function () {
        function FloatingAnimationLinkDirective() {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: '/assets/html/floatingAnimationLink.html',
                scope: {
                    groupId: '='
                },
                controller: ['$scope', 'FloatingAnimationLinkResource', FloatingAnimationLinkController],
                controllerAs: 'ctrl',
                compile: function (scope, element, attrs) {
                    element.$addClass('appearFloatingAnimationLink');
                }
            };
        }
        return FloatingAnimationLinkDirective;
    }());
    memecApp.FloatingAnimationLinkDirective = FloatingAnimationLinkDirective;
    var FloatingAnimationLinkController = (function () {
        function FloatingAnimationLinkController($scope, FloatingAnimationLinkResource) {
            this.$scope = $scope;
            this.FloatingAnimationLinkResource = FloatingAnimationLinkResource;
        }
        FloatingAnimationLinkController.prototype.init = function (groupId) {
            var _this = this;
            this.FloatingAnimationLinkResource.get({ group_id: groupId })
                .$promise.then(function (config) {
                _this.display = config.display;
                _this.initialImage = config.initialImage;
                _this.hoverEffectImage = config.hoverEffectImage;
                _this.linkTo = config.linkTo;
                _this.openLinkInNewTab = config.openLinkInNewTab;
            }).catch(angular.noop);
        };
        return FloatingAnimationLinkController;
    }());
    memecApp.FloatingAnimationLinkController = FloatingAnimationLinkController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var FloatingAnimationLinkResource = (function () {
        function FloatingAnimationLinkResource($resource) {
            return $resource('/api/v1/floating-animation-links');
        }
        return FloatingAnimationLinkResource;
    }());
    memecApp.FloatingAnimationLinkResource = FloatingAnimationLinkResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var PromotionSliderDirective = (function () {
        function PromotionSliderDirective() {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: '/assets/html/promotionSlider.html',
                scope: {
                    groupId: '=',
                },
                controller: ['$scope', 'ModalBannerResource', PromotionSliderController],
                controllerAs: 'ctrl',
                link: function (scope, element, attrs) { }
            };
        }
        return PromotionSliderDirective;
    }());
    memecApp.PromotionSliderDirective = PromotionSliderDirective;
    var PromotionSliderController = (function () {
        function PromotionSliderController($scope, ModalBannerResource) {
            this.$scope = $scope;
            this.ModalBannerResource = ModalBannerResource;
            this.isActive = false;
            this.viewContents = [];
        }
        PromotionSliderController.prototype.init = function () {
            var _this = this;
            this.config = this.ModalBannerResource.get({ group_id: this.$scope.groupId });
            this.config.$promise.then(function () {
                if (!_this.config.isRunning)
                    return;
                angular.forEach(_this.config.viewContents, function (viewContent) {
                    _this.viewContents.push({
                        imgSrc: viewContent.imgPath,
                        imgName: viewContent.message,
                        link: viewContent.linkTo,
                        openLinkInNewTab: viewContent.openTab
                    });
                });
                _this.isActive = true;
            }).catch(angular.noop);
        };
        return PromotionSliderController;
    }());
    memecApp.PromotionSliderController = PromotionSliderController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductDetailController = (function () {
        function ProductDetailController(APP_CONF, $filter, $uibModal, ImgUrlService, MeResource, CartResource, ProductDetailResource, FavoriteResource, AuthResource, PaymentMethodResource, LotteryProductResource, LotteryWinningResource, ServerTimeResource, TicketEventResource) {
            this.APP_CONF = APP_CONF;
            this.$filter = $filter;
            this.$uibModal = $uibModal;
            this.ImgUrlService = ImgUrlService;
            this.MeResource = MeResource;
            this.CartResource = CartResource;
            this.ProductDetailResource = ProductDetailResource;
            this.FavoriteResource = FavoriteResource;
            this.AuthResource = AuthResource;
            this.PaymentMethodResource = PaymentMethodResource;
            this.LotteryProductResource = LotteryProductResource;
            this.LotteryWinningResource = LotteryWinningResource;
            this.ServerTimeResource = ServerTimeResource;
            this.TicketEventResource = TicketEventResource;
            this.purchaseAvailableFlg = false;
            this.displayReservationFlg = false;
            this.paymentMethod = '';
            this.displayFirstSKUFlg = false;
            this.displaySecondSKUFlg = false;
            this.firstSKUs = [];
            this.secondSKUs = [];
            this.quantityList = [];
            this.firstSKUId = 0;
            this.secondSKUId = 0;
            this.firstSKUErr = '';
            this.secondSKUErr = '';
            this.favoriteFlg = false;
            this.displayShareModalFlg = false;
            this.masterFlg = false;
            this.isLogin = false;
            this.dispFlg = false;
            this.isLotteryProduct = false;
            this.service_id = '';
            this.count = '1';
            this.isSelectMainTab = true;
        }
        ProductDetailController.prototype.init = function (productId) {
            var _this = this;
            this.productId = productId;
            this.ServerTimeResource.get().$promise.then(function (data) {
                _this.now = new Date(data.now);
                var me = _this.MeResource.get();
                me.$promise.then(function (data) {
                    _this.masterFlg = data.master_flg;
                    _this.isLogin = true;
                    _this.service_id = data.ticket_center_id;
                    _this.initProduct(productId);
                }, function () {
                    _this.initProduct(productId);
                }).catch(angular.noop);
            }).catch(angular.noop);
        };
        ProductDetailController.prototype.initProduct = function (productId) {
            var _this = this;
            this.productInfo = this.ProductDetailResource.get({ id: productId });
            this.productInfo.$promise.then(function (data) {
                _this.TicketEventResource.query()
                    .$promise.then(function (data) {
                    var ticketProductIdList = data.map(function (element, index, array) {
                        return element.product.id;
                    });
                    if (ticketProductIdList.indexOf(productId) !== -1) {
                        location.replace(_this.productInfo.for_NMB.url);
                        return;
                    }
                    _this.initProductMain();
                }, function () {
                    _this.initProductMain();
                }).catch(angular.noop);
            }, function (data) {
                if (data.status === 404) {
                    location.href = '/404';
                }
            }).catch(angular.noop);
        };
        ProductDetailController.prototype.initProductMain = function () {
            var _this = this;
            this.quantityList = this.createQuantityList(this.productInfo.SKUs[0].sales_limit);
            this.imgUrl = this.createProductDetailImgUrl(this.productInfo.image.code, 0);
            this.dispFlg = true;
            this.isPreOrder = this.productInfo.group.type === 'pre_order';
            this.specialProduct = this.APP_CONF.permitFcList[this.productInfo.permit_fc] || '';
            this.inStock = this.productInfo.flags.unlimited_supply || this.productInfo.flags.in_stock;
            this.inAvailableDate = new Date(this.productInfo.date.available) <= this.now;
            this.inClosedDate = (this.productInfo.date.closed && new Date(this.productInfo.date.closed) <= this.now);
            if (this.productInfo.date.released && this.productInfo.date.available) {
                var released = new Date(this.productInfo.date.released);
                var available = new Date(this.productInfo.date.available);
                if (available < released && this.now < released) {
                    this.displayReservationFlg = true;
                    this.PaymentMethodResource.query({ product_group_id: this.productInfo.group.id }).$promise.then(function (data) {
                        angular.forEach(data, function (rec, i) {
                            _this.paymentMethod = _this.paymentMethod + rec.name + '、';
                        });
                        _this.paymentMethod = _this.paymentMethod.slice(0, -1);
                    }).catch(angular.noop);
                }
            }
            this.LotteryProductResource.get({
                product_id: this.productId
            }).$promise.then(function (response) {
                if (response.status === 204) {
                    _this.makeAvailablePurchase();
                    return;
                }
                _this.isLotteryProduct = true;
                if (_this.isLogin) {
                    _this.LotteryWinningResource.get({
                        service_id: _this.service_id,
                        product_id: _this.productId
                    }).$promise.then(function (data) {
                        _this.isLotteryWinning = data.available;
                        if (_this.isLotteryWinning) {
                            _this.makeAvailablePurchase();
                        }
                    }).catch(angular.noop);
                }
            }, function () {
                _this.makeAvailablePurchase();
            }).catch(angular.noop);
        };
        ;
        ProductDetailController.prototype.isReleaseDateTBD = function (dateReleased) {
            var year = (new Date(dateReleased)).getFullYear();
            return year === 2030;
        };
        ProductDetailController.prototype.makeAvailablePurchase = function () {
            if (!this.inStock)
                return;
            if (!this.masterFlg && !this.inAvailableDate)
                return;
            if (!this.masterFlg && this.inClosedDate)
                return;
            this.purchaseAvailableFlg = true;
            this.SKUs = this.productInfo.SKUs;
            this.countSkuNum();
            this.setFirstSKUs();
        };
        ProductDetailController.prototype.onSubmit = function () {
            if (this.displayFirstSKUFlg) {
                if (this.firstSKUId === 0) {
                    this.firstSKUErr = '* 選択してください。';
                    this.secondSKUErr = '';
                    return;
                }
                else if (this.isStockOut(this.getValue(this.firstSKUs, this.firstSKUId))) {
                    this.firstSKUErr = '* 申し訳ございませんが、只今品切れ中です。';
                    this.secondSKUErr = '';
                    return;
                }
                else {
                    this.firstSKUErr = '';
                }
            }
            if (this.displaySecondSKUFlg) {
                if (this.secondSKUId === 0) {
                    this.secondSKUErr = '* 選択してください。';
                    return;
                }
                else if (this.isStockOut(this.getValue(this.secondSKUs, this.secondSKUId))) {
                    this.secondSKUErr = '* 申し訳ございませんが、只今品切れ中です。';
                    return;
                }
            }
            var productInfo = [
                {
                    product_id: this.productInfo.id,
                    SKU: {
                        attributes: [
                            {
                                id: this.firstSKUId
                            },
                            {
                                id: this.secondSKUId
                            }
                        ]
                    },
                    count: Number(this.count)
                }
            ];
            this.CartResource.save(productInfo)
                .$promise.then(function () {
                location.href = '/selection/cart';
            }).catch(angular.noop);
        };
        ProductDetailController.prototype.login = function () {
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                location.reload();
            }, function () {
            });
        };
        ProductDetailController.prototype.createProductDetailImgUrl = function (code, order) {
            return this.ImgUrlService.createProductDetailImgUrl(code, order);
        };
        ProductDetailController.prototype.range = function (n) {
            var arr = [];
            for (var i = 0; i < n; i++)
                arr.push(i);
            return arr;
        };
        ProductDetailController.prototype.openShareModal = function () {
            this.displayShareModalFlg = true;
        };
        ProductDetailController.prototype.closeShareModal = function () {
            this.displayShareModalFlg = false;
            return false;
        };
        ProductDetailController.prototype.countSkuNum = function () {
            if (this.SKUs[0].attributes[0].id === 0) {
                this.skuNum = 0;
            }
            else if (this.SKUs[0].attributes[1].id === 0) {
                this.skuNum = 1;
            }
            else {
                this.skuNum = 2;
            }
        };
        ProductDetailController.prototype.setFirstSKUs = function () {
            var _this = this;
            if (this.skuNum === 0)
                return;
            this.firstSKUs = [];
            this.firstSKUs.push({ id: 0, value: '選択してください' });
            angular.forEach(this.productInfo.attr_lists[0], function (attr) {
                var stock = '';
                if (_this.productInfo.flags.unlimited_supply) {
                    stock = '(○) ';
                }
                else {
                    stock = '(×) ';
                    angular.forEach(_this.SKUs, function (SKU) {
                        if (attr.id === SKU.attributes[0].id && SKU.stock > 0) {
                            stock = '(○) ';
                        }
                    });
                }
                _this.firstSKUs.push({ id: attr.id, value: stock + attr.value });
            });
            this.displayFirstSKUFlg = true;
            this.setSecondSKUs();
        };
        ProductDetailController.prototype.setSecondSKUs = function () {
            var _this = this;
            if (this.skuNum !== 2)
                return;
            this.secondSKUs = [];
            this.secondSKUs.push({ id: 0, value: '選択してください' });
            angular.forEach(this.productInfo.attr_lists[1], function (attr) {
                if (_this.firstSKUId !== 0) {
                    var stock_1 = '';
                    if (_this.productInfo.flags.unlimited_supply) {
                        stock_1 = '(○) ';
                    }
                    else {
                        angular.forEach(_this.SKUs, function (SKU) {
                            if (_this.firstSKUId === SKU.attributes[0].id && attr.id === SKU.attributes[1].id) {
                                stock_1 = SKU.stock > 0 ? '(○) ' : '(×) ';
                            }
                        });
                    }
                    _this.secondSKUs.push({ id: attr.id, value: stock_1 + attr.value });
                }
            });
            this.secondSKUId = 0;
            this.displaySecondSKUFlg = true;
        };
        ProductDetailController.prototype.isStockOut = function (value) {
            if (value.substr(value.length - 4, 4) === '(×) ') {
                return true;
            }
            return false;
        };
        ProductDetailController.prototype.getValue = function (list, id) {
            var ogj = list.filter(function (item, index) {
                if (item.id == id)
                    return true;
            })[0];
            return ogj.value;
        };
        ProductDetailController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        ProductDetailController.prototype.createQuantityList = function (quantity) {
            var maxValue = 100;
            var list = [];
            if (quantity > maxValue)
                quantity = maxValue;
            for (var i = 1; i <= quantity; i++) {
                list.push(i);
            }
            return list;
        };
        return ProductDetailController;
    }());
    memecApp.ProductDetailController = ProductDetailController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CartController = (function () {
        function CartController(APP_CONF, $uibModal, ImgUrlService, CartResource, OrderSlipResource, TicketEventResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.$uibModal = $uibModal;
            this.ImgUrlService = ImgUrlService;
            this.CartResource = CartResource;
            this.OrderSlipResource = OrderSlipResource;
            this.TicketEventResource = TicketEventResource;
            this.emptyMsg = '';
            this.dispFlg = false;
            this.TicketEventResource.query()
                .$promise.then(function (data) {
                _this.ticketProductIdList = data.map(function (element, index, array) {
                    return element.product.id;
                });
            }).catch(angular.noop);
            this.init();
        }
        CartController.prototype.init = function () {
            var _this = this;
            this.cartList = this.CartResource.query();
            this.cartList.$promise.then(function () {
                _this.dispFlg = true;
                if (_this.cartList.length === 0) {
                    _this.emptyMsg = '※ 現在カート内に商品はございません。';
                }
            }).catch(angular.noop);
        };
        CartController.prototype.changeProductAmount = function (cartItem, changeVal) {
            var _this = this;
            if (changeVal == -1 && cartItem.count == 1) {
                if (!confirm("一度削除したデータは、元に戻せません。\n削除しても宜しいですか？"))
                    return;
            }
            this.CartResource.update({
                product_id: cartItem.product_id,
                SKU: {
                    attributes: [
                        {
                            id: cartItem.SKU.attributes[0].id
                        },
                        {
                            id: cartItem.SKU.attributes[1].id
                        },
                    ]
                },
                count: (cartItem.count + changeVal)
            })
                .$promise.then(function () {
                if (changeVal == -1 && cartItem.count == 1) {
                    location.href = '/selection/cart';
                }
                else {
                    _this.init();
                }
            }).catch(angular.noop);
        };
        CartController.prototype.removeProduct = function (cartItem) {
            if (!confirm("一度削除したデータは、元に戻せません。\n削除しても宜しいですか？"))
                return;
            this.CartResource.remove({
                product_id: cartItem.product_id,
                SKU: {
                    attributes: [
                        {
                            id: cartItem.SKU.attributes[0].id
                        },
                        {
                            id: cartItem.SKU.attributes[1].id
                        }
                    ]
                },
                count: 0
            })
                .$promise.then(function () {
                location.href = '/selection/cart';
            }, function () {
                alert('削除できませんでした。ご迷惑をおかけしますが、お時間を置いてもう一度ご操作ください。');
            }).catch(angular.noop);
        };
        CartController.prototype.onClick = function (product_group_id) {
            var _this = this;
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                _this.OrderSlipResource.update({ method: 'product-group', id: product_group_id })
                    .$promise.then(function () {
                    $('#frm').attr('action', '/purchase/delivery?return=selection/cart');
                    $('#frm').submit();
                }).catch(function (error) {
                    if (error.status === 404) {
                        alert("接続がタイムアウトしました。\nカート内が空になりますため、再度ご購入したい商品をカートに入れてください。");
                    }
                    else {
                        alert('ページが更新されますので、時間を置いてからもう一度ご操作ください。');
                    }
                    location.reload();
                });
            }, function () {
            });
        };
        CartController.prototype.getErrorMessage = function (error) {
            if (error.code === 4) {
                return error.message;
            }
            var errorMessage = this.APP_CONF.error;
            return errorMessage[error.code];
        };
        CartController.prototype.checkBulkBuyingCondition = function (errors) {
            var meet = true;
            angular.forEach(errors, function (value) {
                if (value.code === 4)
                    meet = false;
            });
            return meet;
        };
        CartController.prototype.createCartImgUrl = function (code) {
            return this.ImgUrlService.createCartImgUrl(code);
        };
        CartController.prototype.countCartItems = function (cart) {
            return cart.items.reduce(function (count, item) { return count + item.count; }, 0);
        };
        return CartController;
    }());
    memecApp.CartController = CartController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TicketCartController = (function () {
        function TicketCartController($uibModal, ImgUrlService, CartResource, ProductDetailResource, ClaspTicketPaymentResource, OrderSlipResource, $q) {
            this.$uibModal = $uibModal;
            this.ImgUrlService = ImgUrlService;
            this.CartResource = CartResource;
            this.ProductDetailResource = ProductDetailResource;
            this.ClaspTicketPaymentResource = ClaspTicketPaymentResource;
            this.OrderSlipResource = OrderSlipResource;
            this.$q = $q;
            this.dispButton = true;
            this.dispFlg = false;
        }
        TicketCartController.prototype.init = function (cartId) {
            var _this = this;
            this.cartId = cartId;
            this.claspTicketPayment = this.ClaspTicketPaymentResource.get({ cartId: cartId });
            this.claspTicketPayment.$promise.then(function (data) {
                var results = _this.claspTicketPayment.products.map(function (product) {
                    return _this.canBuy(product.clasp_tickets);
                });
                _this.dispButton = results.every(function (val, index, array) { return (val); });
                var subTotals = _this.claspTicketPayment.products.map(function (product) {
                    return _this.sumTotalPrice(product.clasp_tickets);
                });
                _this.totalPrice = subTotals.reduce(function (total, data) { return total + data; });
                _this.dispFlg = true;
            }).catch(function (error) {
                location.href = '/404';
            });
        };
        TicketCartController.prototype.onClick = function () {
            var _this = this;
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                _this.ClaspTicketPaymentResource.get({ cartId: _this.cartId })
                    .$promise.then(function (data) {
                    var products = data.products.map(function (product) {
                        return {
                            product_id: Number(product.product.id),
                            SKU: { attributes: [{ id: 0 }, { id: 0 }] },
                            count: _this.sumCount(product.cart)
                        };
                    });
                    _this.CartResource.updateMultiple(products)
                        .$promise.then(function () {
                        _this.OrderSlipResource.update({ method: 'product-group', id: data.products[0].product.group_id })
                            .$promise.then(function () {
                            _this.OrderSlipResource.update({ method: 'claspticket', id: _this.cartId })
                                .$promise.then(function () {
                                $('#frm').attr('action', '/purchase/delivery?return=selection/ticket-cart/' + _this.cartId);
                                $('#frm').submit();
                            }).catch(angular.noop);
                        }).catch(function (error) {
                            if (error.status === 404) {
                                alert("接続がタイムアウトしました。\nカート内が空になりますため、再度ご購入したい商品をカートに入れてください。");
                            }
                            else {
                                alert('ページが更新されますので、時間を置いてからもう一度ご操作ください。');
                            }
                            location.reload();
                        });
                    }).catch(angular.noop);
                }).catch(function (error) {
                    location.href = '/404';
                });
            }, function () {
            });
        };
        TicketCartController.prototype.createCartImgUrl = function (code) {
            return this.ImgUrlService.createCartImgUrl(code);
        };
        TicketCartController.prototype.sumTotalPrice = function (arr) {
            var sum = 0;
            arr.forEach(function (elm) {
                sum += elm.total_price;
            });
            return sum;
        };
        TicketCartController.prototype.sumCount = function (arr) {
            var sum = 0;
            arr.forEach(function (elm) {
                sum += Number(elm.count);
            });
            return sum;
        };
        TicketCartController.prototype.canBuy = function (ticketList) {
            var canBuy = true;
            ticketList.forEach(function (ticket) {
                if (ticket.payment.status.id !== '1'
                    || new Date() < new Date(ticket.payment.start_date)
                    || new Date(ticket.payment.end_date) <= new Date()) {
                    canBuy = false;
                }
            });
            return canBuy;
        };
        return TicketCartController;
    }());
    memecApp.TicketCartController = TicketCartController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var LotteryCartController = (function () {
        function LotteryCartController(APP_CONF, LotteryProductResource, MeResource, $uibModal, LotteryWinningResource, AuthResource, CartResource) {
            this.APP_CONF = APP_CONF;
            this.LotteryProductResource = LotteryProductResource;
            this.MeResource = MeResource;
            this.$uibModal = $uibModal;
            this.LotteryWinningResource = LotteryWinningResource;
            this.AuthResource = AuthResource;
            this.CartResource = CartResource;
            this.lotteryUrl = this.APP_CONF.lotteryUrl;
        }
        LotteryCartController.prototype.init = function (productId) {
            this.productId = productId;
            this.judgeLotteryProduct();
        };
        LotteryCartController.prototype.judgeLotteryProduct = function () {
            var _this = this;
            this.LotteryProductResource.get({
                product_id: this.productId
            }).$promise.then(function (response) {
                if (response.status === 204) {
                    location.href = '/404';
                    return;
                }
                _this.judgeLogin();
            }, function () {
                location.href = '/404';
            }).catch(angular.noop);
        };
        LotteryCartController.prototype.judgeLogin = function () {
            var _this = this;
            this.MeResource.get()
                .$promise.then(function (data) {
                _this.service_id = data.ticket_center_id;
                _this.judgeLotteryWinning();
            }, function () {
                _this.showLoginForm();
            }).catch(angular.noop);
        };
        LotteryCartController.prototype.showLoginForm = function () {
            var _this = this;
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                _this.judgeLogin();
            }, function () {
                location.href = _this.lotteryUrl + 'mypage/applications';
            });
        };
        LotteryCartController.prototype.judgeLotteryWinning = function () {
            var _this = this;
            this.LotteryWinningResource.get({
                service_id: this.service_id,
                product_id: this.productId
            }).$promise.then(function (data) {
                if (data.available) {
                    _this.linkToCart();
                    return;
                }
                _this.logout();
            }, function () {
                _this.logout();
            }).catch(angular.noop);
        };
        LotteryCartController.prototype.logout = function () {
            alert('下記のいずれかによってご購入いただけません。\n\n・ご当選いただきました会員IDでログインしていない\n・ご購入が完了している\n・ご当選いただいていない商品のご購入');
            this.AuthResource.delete()
                .$promise.then(function (data) {
                location.reload();
            }, function () {
                alert('ログアウトに失敗しました。\nお申込みいただいたWIZ*ONEアカウントで再ログインしていただき\n再度、福袋マイページより操作をお願いいたします。');
            }).catch(angular.noop);
        };
        LotteryCartController.prototype.linkToCart = function () {
            var productInfo = [
                {
                    product_id: Number(this.productId),
                    SKU: { attributes: [{ id: 0 }, { id: 0 }] },
                    count: 1
                }
            ];
            this.CartResource.save(productInfo)
                .$promise.then(function () {
                location.href = '/selection/cart';
            }, function () {
                alert('福袋商品のカートへの投入に失敗しました。\n福袋マイページに戻り再度操作をするか、直接対象の福袋商品をカートに入れてくださいますようお願いいたします。');
            }).catch(angular.noop);
        };
        return LotteryCartController;
    }());
    memecApp.LotteryCartController = LotteryCartController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SearchController = (function () {
        function SearchController(APP_CONF, UtilService, ImgUrlService, SearchService, SearchResource, GroupInfoResource, CategoryResource, AuthResource, MeResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.ImgUrlService = ImgUrlService;
            this.SearchService = SearchService;
            this.SearchResource = SearchResource;
            this.GroupInfoResource = GroupInfoResource;
            this.CategoryResource = CategoryResource;
            this.AuthResource = AuthResource;
            this.MeResource = MeResource;
            this.userName = 'Now Loading...';
            this.viewWord = '';
            this.pageNum = 1;
            this.pageItems = 10;
            this.pageStartPos = 0;
            this.groupId = '0';
            this.teamId = '0';
            this.teamList = [];
            this.memberId = '0';
            this.memberList = [];
            this.category1Id = '0';
            this.category2Id = '0';
            this.price = '';
            this.sort = 'Newest';
            this.exceptSoldOut = false;
            this.dispFlg = false;
            this.isAddingProducts = false;
            this.fetchSize = 48;
            this.esPageNum = 0;
            this.wasFetchedAllProduct = false;
            this.wasFetchedCategory = false;
            this.wasBeganSearch = false;
            this.isSmartphone = this.UtilService.isSmartphone();
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.groupIdList = this.APP_CONF.groupIdList;
            this.now = new Date();
            this.AuthResource.get()
                .$promise.then(function (data) {
                if (data.logged_in) {
                    _this.isLogin = true;
                    _this.MeResource.get()
                        .$promise.then(function (data) {
                        _this.userName = 'こんにちは！' + data.name.last + data.name.first + 'さん';
                    }).catch(angular.noop);
                }
                else {
                    _this.initInLogout();
                }
            }, function (data) {
                _this.initInLogout();
            }).catch(angular.noop);
        }
        SearchController.prototype.init = function (wholeCtrl, groupId, query) {
            this.wholeCtrl = wholeCtrl;
            this.groupId = groupId.toString();
            this.fetchInfo();
            this.wholeCtrl.keyword = query;
            this.dispFlg = true;
            this.search();
        };
        SearchController.prototype.createProductListImgUrl = function (code) {
            return this.ImgUrlService.createProductListImgUrl(code);
        };
        SearchController.prototype.pager = function (addPageNum) {
            this.pageNum = this.pageNum + addPageNum;
            this.pageStartPos = (this.pageNum - 1) * this.pageItems;
        };
        SearchController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        SearchController.prototype.selectGroup = function () {
            location.href = '/selection/search/' + this.groupId + '?q=' + encodeURIComponent(this.wholeCtrl.keyword);
        };
        SearchController.prototype.fetchInfo = function () {
            var _this = this;
            this.teamId = '0';
            this.memberId = '0';
            this.category1Id = '0';
            this.category2Id = '0';
            if (this.groupId !== '0') {
                this.group = this.GroupInfoResource.get({
                    id: this.groupId
                });
                this.group.$promise.then(function () {
                    _this.teamList = _this.group.teams;
                    _this.memberList = [];
                    _this.teamList.forEach(function (team) {
                        _this.memberList = _this.memberList.concat(team.members);
                    });
                }).catch(angular.noop);
                this.category1List = this.CategoryResource.query({ group_id: this.groupId });
                this.category1List.$promise.then(function () {
                    _this.wasFetchedCategory = true;
                }).catch(angular.noop);
            }
        };
        SearchController.prototype.selectTeam = function () {
            var _this = this;
            this.memberId = '0';
            if (this.teamId === '0') {
                this.memberList = [];
                this.teamList.forEach(function (team) {
                    _this.memberList = _this.memberList.concat(team.members);
                });
            }
            else {
                this.memberList = this.teamList.filter(function (item, index) {
                    if (item.id == _this.teamId)
                        return true;
                })[0].members;
            }
        };
        SearchController.prototype.selectCategory1 = function () {
            var _this = this;
            this.category2Id = '0';
            if (this.category1Id !== '0') {
                var category_1 = this.CategoryResource.get({
                    id: this.category1Id,
                    recursive: true,
                    level: 1
                });
                category_1.$promise.then(function () {
                    _this.category2List = category_1.children;
                }).catch(angular.noop);
            }
        };
        SearchController.prototype.search = function () {
            this.wasBeganSearch = true;
            this.wasFetchedAllProduct = false;
            this.productList = [];
            this.esPageNum = 0;
            this.wholeSize = 0;
            var filters = [];
            var person;
            var category;
            var exactMatch = function (fieldName) { return function (value) {
                return { 'term': (_a = {}, _a[fieldName] = value, _a) };
                var _a;
            }; };
            var halfOpenInterval = function (target) { return function (min, sup) {
                return { 'range': (_a = {}, _a[target] = {
                        'gte': min,
                        'lt': sup
                    }, _a) };
                var _a;
            }; };
            if (this.groupId !== '0')
                person = exactMatch('AKB_group.id')(this.groupId);
            if (this.teamId !== '0')
                person = exactMatch('team.id')(this.teamId);
            if (this.memberId !== '0')
                person = exactMatch('member.id')(this.memberId);
            if (this.category1Id !== '0')
                category = exactMatch('category.id')(this.category1Id);
            if (this.category2Id !== '0')
                category = exactMatch('category.id')(this.category2Id);
            if (person)
                filters.push(person);
            if (category)
                filters.push(category);
            if (this.price) {
                var minPrice = void 0, supPrice = void 0;
                _a = this.price.split('-').map(Number), minPrice = _a[0], supPrice = _a[1];
                filters.push(halfOpenInterval('price.with_tax')(minPrice, supPrice));
            }
            if (this.exceptSoldOut)
                filters.push(exactMatch('flags.in_stock')(!this.exceptSoldOut));
            this.searchCondition = {
                keyword: this.wholeCtrl.keyword || '*',
                filters: filters,
                size: this.fetchSize,
                from: this.fetchSize * this.esPageNum,
                sort: this.sort
            };
            this.fetchNext();
            var _a;
        };
        SearchController.prototype.updateCondition = function () {
            this.searchCondition.from = this.fetchSize * this.esPageNum;
        };
        SearchController.prototype.fetchNext = function () {
            var _this = this;
            if (!this.wasBeganSearch) {
                return;
            }
            if (this.isAddingProducts || this.wasFetchedAllProduct) {
                return;
            }
            this.isAddingProducts = true;
            this.SearchInfo = this.SearchResource.save(this.searchCondition);
            this.SearchInfo.$promise.then(function (data) {
                var fetched = angular.copy(data.hits);
                for (var _i = 0, fetched_2 = fetched; _i < fetched_2.length; _i++) {
                    var productAddition = fetched_2[_i];
                    _this.productList.push(productAddition);
                }
                if (_this.productList.length >= data.count) {
                    _this.wasFetchedAllProduct = true;
                }
                _this.wholeSize = data.count;
                _this.esPageNum++;
                _this.updateCondition();
                _this.isAddingProducts = false;
                _this.viewWord = _this.wholeCtrl.keyword ? _this.wholeCtrl.keyword : '全商品';
            }).catch(angular.noop);
        };
        SearchController.prototype.cancel = function () {
            this.groupId = '0';
            this.selectGroup();
            this.sort = 'Newest';
            this.exceptSoldOut = false;
        };
        SearchController.prototype.initInLogout = function () {
            this.isLogin = false;
            this.leadRegURI = this.APP_CONF.leadRegistrationUri;
        };
        return SearchController;
    }());
    memecApp.SearchController = SearchController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductListController = (function () {
        function ProductListController(APP_CONF, UtilService, ImgUrlService, CategoryResource, CategoryProductResource, ProductListResource, $filter, BannerService) {
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.ImgUrlService = ImgUrlService;
            this.CategoryResource = CategoryResource;
            this.CategoryProductResource = CategoryProductResource;
            this.ProductListResource = ProductListResource;
            this.$filter = $filter;
            this.BannerService = BannerService;
            this.categoryName = 'Now Loading...';
            this.pageNum = 1;
            this.pageItems = 10;
            this.pageStartPos = 0;
            this.previewList = {};
            this.categoryDispFlg = false;
            this.productDispFlg = false;
            this.isAddingProducts = false;
            this.fetchSize = 48;
            this.fetchSizeChild = 6;
            this.esPageNum = 0;
            this.wasFetchedAllProduct = false;
            window.scrollTo(0, 0);
            this.isSmartphone = this.UtilService.isSmartphone();
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.groupIdList = this.APP_CONF.groupIdList;
            this.now = new Date();
        }
        ProductListController.prototype.init = function (groupId, categoryId) {
            var _this = this;
            this.groupId = groupId;
            this.categoryId = categoryId;
            this.category = this.CategoryResource.get({
                id: categoryId,
                recursive: true,
                level: 1
            });
            this.category.$promise.then(function () {
                _this.categoryDispFlg = true;
                _this.categoryName = _this.category.name;
                if (_this.category.children.length === 0) {
                    _this.displayChildCategory();
                }
                else {
                    _this.fetchChildCategoryPreview();
                }
            }, function (data) {
                if (data.status === 404) {
                    location.href = '/404';
                }
            }).catch(angular.noop);
        };
        ProductListController.prototype.createProductListImgUrl = function (code) {
            return this.ImgUrlService.createProductListImgUrl(code);
        };
        ProductListController.prototype.fetchChildCategoryPreview = function () {
            var _this = this;
            var _loop_1 = function(child) {
                this_1.searchByCategory(child.id, this_1.fetchSizeChild).$promise.then(function (data) {
                    _this.previewList[child.id] = data.hits;
                }).catch(angular.noop);
            };
            var this_1 = this;
            for (var _i = 0, _a = this.category.children; _i < _a.length; _i++) {
                var child = _a[_i];
                _loop_1(child);
            }
        };
        ProductListController.prototype.pager = function (addPageNum) {
            this.pageNum = this.pageNum + addPageNum;
            this.pageStartPos = (this.pageNum - 1) * this.pageItems;
        };
        ProductListController.prototype.displayChildCategory = function () {
            if (!this.category.children) {
                return;
            }
            if (this.category.children.length > 0) {
                return;
            }
            if (!this.productList) {
                this.productList = [];
                this.fetchNext();
                this.productDispFlg = true;
            }
            else {
                if (this.isAddingProducts || this.wasFetchedAllProduct) {
                    return;
                }
                this.fetchNext();
            }
        };
        ProductListController.prototype.fetchNext = function () {
            var _this = this;
            this.isAddingProducts = true;
            this.searchInfo = this.searchByCategory(this.categoryId, this.fetchSize);
            this.searchInfo.$promise.then(function (data) {
                var fetched = angular.copy(data.hits);
                for (var _i = 0, fetched_3 = fetched; _i < fetched_3.length; _i++) {
                    var productAddition = fetched_3[_i];
                    _this.productList.push(productAddition);
                }
                if (_this.productList.length >= data.count) {
                    _this.wasFetchedAllProduct = true;
                }
                _this.wholeSize = data.count;
                _this.isAddingProducts = false;
            }).catch(angular.noop);
            this.esPageNum++;
        };
        ProductListController.prototype.searchByCategory = function (categoryId, fetchSize) {
            var conditions = {
                id: categoryId,
                size: fetchSize,
                from: this.esPageNum * fetchSize
            };
            return this.CategoryProductResource.get(conditions);
        };
        ProductListController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        return ProductListController;
    }());
    memecApp.ProductListController = ProductListController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductListMemberController = (function () {
        function ProductListMemberController(APP_CONF, UtilService, ImgUrlService, MemberResource, CatalogResource) {
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.ImgUrlService = ImgUrlService;
            this.MemberResource = MemberResource;
            this.CatalogResource = CatalogResource;
            this.productList = [];
            this.memberName = 'Now Loading...';
            this.pageNum = 1;
            this.pageItems = 10;
            this.pageStartPos = 0;
            this.fetchSize = 48;
            this.esPageNum = 0;
            this.wasFetchedAllProduct = false;
            this.isAddingProducts = false;
            this.canSearch = false;
            this.isSmartphone = this.UtilService.isSmartphone();
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.groupIdList = this.APP_CONF.groupIdList;
            this.now = new Date();
        }
        ProductListMemberController.prototype.init = function (groupId, memberId) {
            var _this = this;
            this.groupId = groupId;
            this.memberId = memberId;
            this.member = this.MemberResource.get({
                id: this.memberId
            });
            this.member.$promise.then(function (data) {
                _this.memberName = data.name;
                _this.canSearch = true;
                _this.fetchNext();
            }, function (data) {
                if (data.status === 404) {
                    location.href = '/404';
                }
            }).catch(angular.noop);
        };
        ProductListMemberController.prototype.fetchNext = function () {
            var _this = this;
            if (!this.canSearch || this.isAddingProducts || this.wasFetchedAllProduct) {
                return;
            }
            this.isAddingProducts = true;
            this.searchInfo = this.searchByMember(this.memberName, this.fetchSize);
            this.searchInfo.$promise.then(function (data) {
                var fetched = angular.copy(data.hits);
                for (var _i = 0, fetched_4 = fetched; _i < fetched_4.length; _i++) {
                    var productAddition = fetched_4[_i];
                    _this.productList.push(productAddition);
                }
                if (_this.productList.length >= data.count) {
                    _this.wasFetchedAllProduct = true;
                }
                _this.wholeSize = data.count;
                _this.isAddingProducts = false;
            }).catch(angular.noop);
            this.esPageNum++;
        };
        ProductListMemberController.prototype.searchByMember = function (memberName, fetchSize) {
            var conditions = {
                keyword: memberName,
                category: 'top',
                size: fetchSize,
                from: this.esPageNum * fetchSize
            };
            return this.CatalogResource.get(conditions);
        };
        ProductListMemberController.prototype.createProductListImgUrl = function (code) {
            return this.ImgUrlService.createProductListImgUrl(code);
        };
        ProductListMemberController.prototype.pager = function (addPageNum) {
            this.pageNum = this.pageNum + addPageNum;
            this.pageStartPos = (this.pageNum - 1) * this.pageItems;
        };
        ProductListMemberController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        return ProductListMemberController;
    }());
    memecApp.ProductListMemberController = ProductListMemberController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var BulkBuyingController = (function () {
        function BulkBuyingController(APP_CONF, $scope, $uibModal, $sce, BulkBuyingResource, CartResource, ImgUrlService, UtilService) {
            this.APP_CONF = APP_CONF;
            this.$scope = $scope;
            this.$uibModal = $uibModal;
            this.$sce = $sce;
            this.BulkBuyingResource = BulkBuyingResource;
            this.CartResource = CartResource;
            this.ImgUrlService = ImgUrlService;
            this.UtilService = UtilService;
            this.pageList = [];
            this.pageNum = 1;
            this.pageItems = 10;
            this.pageStartPos = 0;
            this.displayShareModalFlg = false;
            this.isChangingCart = false;
            this.serverErrorMessage = 'ご迷惑おかけしております。時間をおいて再度ご操作ください。';
        }
        BulkBuyingController.prototype.init = function (bulkBuyingId, scopeWholeCtrl) {
            var _this = this;
            this.scopeWholeCtrl = scopeWholeCtrl;
            this.bulkBuyingInfo = this.BulkBuyingResource.get({ id: bulkBuyingId });
            this.bulkBuyingInfo.$promise.then(function () {
                _this.productList = _this.bulkBuyingInfo.products;
                var cart = _this.CartResource.query();
                cart.$promise.then(function (data) {
                    var filterdCart = data.filter(function (cart) {
                        return cart.product_group.id === _this.bulkBuyingInfo.product_group.id;
                    });
                    if (filterdCart.length === 0) {
                        for (var _i = 0, _a = _this.productList; _i < _a.length; _i++) {
                            var product = _a[_i];
                            product['selected'] = false;
                        }
                        return;
                    }
                    var _loop_2 = function(product) {
                        var filterd = filterdCart[0].items.filter(function (item) {
                            return item.product_id === product.id;
                        });
                        product['selected'] = filterd.length > 0;
                    };
                    for (var _b = 0, _c = _this.productList; _b < _c.length; _b++) {
                        var product = _c[_b];
                        _loop_2(product);
                    }
                }, function () {
                    for (var _i = 0, _a = _this.productList; _i < _a.length; _i++) {
                        var product = _a[_i];
                        product['selected'] = false;
                    }
                }).catch(angular.noop);
            }).catch(angular.noop);
            this.isSmartPhone = this.UtilService.isSmartphone();
            this.groupIdList = this.APP_CONF.groupIdList;
        };
        BulkBuyingController.prototype.createImgUrl = function (code) {
            return this.ImgUrlService.createProductDetailImgUrl(code, 0);
        };
        BulkBuyingController.prototype.showImageModal = function (selectedProduct) {
            this.selectedProduct = selectedProduct;
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/image.html',
                backdrop: 'true'
            });
            this.modalInstance.result.catch(angular.noop);
        };
        BulkBuyingController.prototype.toggleProductPool = function (product) {
            if (product['selected']) {
                this.addToCart(product);
            }
            else {
                this.removeFromCart(product);
            }
        };
        BulkBuyingController.prototype.dismissModal = function () {
            this.modalInstance.dismiss();
        };
        BulkBuyingController.prototype.addToCart = function (product) {
            var _this = this;
            this.isChangingCart = true;
            var param = this.createCartParam(product.id, 1);
            this.CartResource.save([param])
                .$promise.then(function () {
                _this.isChangingCart = false;
                _this.scopeWholeCtrl.fetchCartCount();
            }, function () {
                _this.isChangingCart = false;
                product['selected'] = !product['selected'];
                _this.showServerErrorMessage();
            }).catch(angular.noop);
        };
        BulkBuyingController.prototype.removeFromCart = function (product) {
            var _this = this;
            this.isChangingCart = true;
            var param = this.createCartParam(product.id);
            this.CartResource.remove(param)
                .$promise.then(function () {
                _this.isChangingCart = false;
                _this.scopeWholeCtrl.fetchCartCount();
            }, function () {
                _this.isChangingCart = false;
                product['selected'] = !product['selected'];
                _this.showServerErrorMessage();
            }).catch(angular.noop);
        };
        BulkBuyingController.prototype.createCartParam = function (productId, count) {
            if (count === void 0) { count = 0; }
            var cartParam = {
                product_id: productId,
                SKU: {
                    attributes: [
                        {
                            id: 0
                        },
                        {
                            id: 0
                        }
                    ]
                },
                count: count
            };
            return cartParam;
        };
        BulkBuyingController.prototype.showServerErrorMessage = function () {
            alert(this.serverErrorMessage);
        };
        BulkBuyingController.prototype.fetchPrevProduct = function (productList, pivot) {
            var prevDistance = -1;
            return this.fetchProduct(productList, pivot, prevDistance);
        };
        BulkBuyingController.prototype.fetchNextProduct = function (productList, pivot) {
            var nextDistance = 1;
            return this.fetchProduct(productList, pivot, nextDistance);
        };
        BulkBuyingController.prototype.fetchProduct = function (productList, pivot, distance) {
            var currentIndex = productList.indexOf(pivot);
            if (currentIndex === -1)
                return null;
            var distProduct = productList[currentIndex + distance];
            if (typeof distProduct === 'undefined')
                return null;
            return distProduct;
        };
        BulkBuyingController.prototype.setDetailViewTarget = function (target) {
            this.selectedProduct = target;
        };
        BulkBuyingController.prototype.openShareModal = function () {
            this.displayShareModalFlg = true;
        };
        BulkBuyingController.prototype.closeShareModal = function () {
            this.displayShareModalFlg = false;
            return false;
        };
        return BulkBuyingController;
    }());
    memecApp.BulkBuyingController = BulkBuyingController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductListResource = (function () {
        function ProductListResource($resource) {
            return $resource('/api/v1/products/:id');
        }
        return ProductListResource;
    }());
    memecApp.ProductListResource = ProductListResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MemberResource = (function () {
        function MemberResource($resource) {
            return $resource('/api/v1/members/:id', { id: '@id' });
        }
        return MemberResource;
    }());
    memecApp.MemberResource = MemberResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SearchResource = (function () {
        function SearchResource($resource) {
            return $resource('/api/v1/search');
        }
        return SearchResource;
    }());
    memecApp.SearchResource = SearchResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var BulkBuyingResource = (function () {
        function BulkBuyingResource($resource) {
            return $resource('/api/v1/bulk-buyings/:id', { id: '@id' });
        }
        return BulkBuyingResource;
    }());
    memecApp.BulkBuyingResource = BulkBuyingResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var LotteryProductResource = (function () {
        function LotteryProductResource($resource) {
            return $resource('/api/v1/hype-item/:product_id', { product_id: '@product_id' }, {
                get: {
                    method: 'GET',
                    interceptor: {
                        response: function (response) {
                            return response;
                        }
                    }
                }
            });
        }
        return LotteryProductResource;
    }());
    memecApp.LotteryProductResource = LotteryProductResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var LotteryWinningResource = (function () {
        function LotteryWinningResource($resource, APP_CONF) {
            return $resource(APP_CONF.lotteryUrl + 'api/v1/right');
        }
        return LotteryWinningResource;
    }());
    memecApp.LotteryWinningResource = LotteryWinningResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductSliderDirective = (function () {
        function ProductSliderDirective() {
            return this.CreateDirective();
        }
        ProductSliderDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    var img_obj = $('.detailSlider').children('img');
                    img_obj.css('height', img_obj.height() + 'px');
                    if (scope.$last && (element.parent().children('li')).length > 1) {
                        setTimeout(function () {
                            $('.detailSlider').bxSlider({
                                useCSS: false
                            });
                        }, 0);
                    }
                }
            };
        };
        return ProductSliderDirective;
    }());
    memecApp.ProductSliderDirective = ProductSliderDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ProductSliderPcDirective = (function () {
        function ProductSliderPcDirective() {
            return this.CreateDirective();
        }
        ProductSliderPcDirective.prototype.CreateDirective = function () {
            return {
                link: function (scope, element, attrs) {
                    var img_obj = $('.detailSliderPC').children('img');
                    img_obj.css('height', img_obj.height() + 'px');
                    if (scope.$last === true && (element.parent().children('li')).length > 1) {
                        setTimeout(function () {
                            $('.detailSliderPC').bxSlider({
                                pagerCustom: '#bx-pager',
                                useCSS: false
                            });
                        }, 0);
                    }
                }
            };
        };
        return ProductSliderPcDirective;
    }());
    memecApp.ProductSliderPcDirective = ProductSliderPcDirective;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SearchService = (function () {
        function SearchService($http) {
            this.$http = $http;
        }
        SearchService.prototype.fetchProductList = function (query, callback) {
            this.$http({
                method: 'GET',
                url: '/api/v1/search?q=' + encodeURIComponent(query) + '&size=10000'
            })
                .then(function (response) {
                callback(response.data);
            }).catch(angular.noop);
        };
        return SearchService;
    }());
    memecApp.SearchService = SearchService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MemberListController = (function () {
        function MemberListController(APP_CONF, UtilService, GroupInfoResource) {
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.GroupInfoResource = GroupInfoResource;
            this.selectIndex = 0;
            this.memberImgUrl = 'img/members/';
            this.isSmartphone = this.UtilService.isSmartphone();
            this.bannerDomain = this.APP_CONF.resourceUrl;
        }
        MemberListController.prototype.init = function (id) {
            this.groupInfo = this.GroupInfoResource.get({ id: id });
            this.groupInfo.$promise.catch(angular.noop);
        };
        MemberListController.prototype.changeTeam = function (selectIndex) {
            this.selectIndex = selectIndex;
        };
        return MemberListController;
    }());
    memecApp.MemberListController = MemberListController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var GroupInfoResource = (function () {
        function GroupInfoResource($resource) {
            return $resource('/api/v1/groups/:id', { id: '@id' }, {
                get: { method: 'GET', cache: true },
                query: { method: 'GET', cache: true, isArray: true }
            });
        }
        return GroupInfoResource;
    }());
    memecApp.GroupInfoResource = GroupInfoResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ConfirmationController = (function () {
        function ConfirmationController($scope, $uibModal, $cookies, UtilService, ImgUrlService, IdentifyPaymentService, CartResource, OrderSlipResource, ClaspTicketPaymentResource, EzineResource, $filter, JobService, ServerTimeResource, MeResource) {
            var _this = this;
            this.$scope = $scope;
            this.$uibModal = $uibModal;
            this.$cookies = $cookies;
            this.UtilService = UtilService;
            this.ImgUrlService = ImgUrlService;
            this.IdentifyPaymentService = IdentifyPaymentService;
            this.CartResource = CartResource;
            this.OrderSlipResource = OrderSlipResource;
            this.ClaspTicketPaymentResource = ClaspTicketPaymentResource;
            this.EzineResource = EzineResource;
            this.$filter = $filter;
            this.JobService = JobService;
            this.ServerTimeResource = ServerTimeResource;
            this.MeResource = MeResource;
            this.unexpectedMessage = 'ご迷惑おかけしております。\n申し訳ございませんが、再度ご操作ください';
            this.timeoutMessage = 'ご迷惑おかけしております。\n申し訳ございませんが、カート画面に戻りますので再度ご操作ください。\n※カート画面に商品が残っていない場合、ご購入が成功している可能性がございます。\nお手数ですが、一度マイページよりご確認ください。';
            this.isTicket = false;
            this.isReservation = false;
            this.dispFlg = false;
            this.isNextBtnDisabled = false;
            this.orderingMessage = '注文処理中';
            this.email = 'Now Loading...';
            this.loadingModalMessage = this.orderingMessage;
            this.orderSlip = this.OrderSlipResource.get();
            this.orderSlip.$promise.then(function () {
                _this.dispFlg = true;
                var lotteryLocalIds = [1592, 1593, 1594, 1595, 1596, 1597, 1616, 1617, 1618, 1619, 1620, 1621, 1640, 1642];
                _this.islotteryLocal = lotteryLocalIds.indexOf(_this.orderSlip.product_group.id) >= 0;
                var item = _this.orderSlip.items[0];
                if (item.date.released && item.date.available) {
                    var released_1 = new Date(item.date.released);
                    var available_1 = new Date(item.date.available);
                    _this.ServerTimeResource.get().$promise.then(function (data) {
                        var now = new Date(data.now);
                        if (available_1 < released_1 && now < released_1) {
                            _this.isReservation = true;
                        }
                    }).catch(angular.noop);
                }
                _this.product_group_id = _this.orderSlip.product_group_id;
                _this.CartResource.query()
                    .$promise.then(function (data) {
                    var cart = _this.$filter('filter')(data, { product_group: { id: _this.product_group_id } }, true);
                    _this.cartItems = cart[0].items;
                    _this.productGroupName = cart[0].product_group.name.long;
                    _this.deliveryTime = cart[0].product_group.delivery_time;
                }).catch(angular.noop);
                if (_this.orderSlip.cart_id !== 0) {
                    _this.isTicket = true;
                    _this.claspTicketPayment = _this.ClaspTicketPaymentResource.get({ cartId: _this.orderSlip.cart_id });
                    _this.claspTicketPayment.$promise.catch(angular.noop);
                }
                _this.shipping = _this.orderSlip.shipping;
            }).catch(angular.noop);
            this.ezine = this.EzineResource.get();
            this.ezine.$promise.then(function () {
                _this.ezineSubscribeChecked = true;
                _this.ezineLoaded = true;
            }).catch(angular.noop);
            this.MeResource.get()
                .$promise.then(function (data) {
                if (data.emails[0]) {
                    _this.email = data.emails[0];
                }
                else {
                    _this.email = '未設定';
                }
            }).catch(angular.noop);
        }
        ConfirmationController.prototype.confirm = function () {
            var _this = this;
            this.isNextBtnDisabled = true;
            this.loadingModalMessage = this.orderingMessage;
            this.modalInstance = this.UtilService.showLoadingModal(this.$uibModal, this.$scope);
            if (this.ezineSubscribeChecked) {
                this.EzineResource.update({
                    subscribed: this.ezineSubscribeChecked
                })
                    .$promise.then(function () {
                }).catch(angular.noop);
            }
            this.OrderSlipResource.get({ method: 'csrf-token' })
                .$promise.then(function (data) {
                _this.OrderSlipResource.save({ csrf_token: data['csrf_token'] }).$promise
                    .then(function (data) {
                    _this.JobService.execJob('orders', data['headers']['memec-progress-token'], function (result) {
                        _this.modalInstance.close();
                        $('<input>').attr({
                            type: 'hidden',
                            name: 'order_id',
                            value: result.order_id
                        }).appendTo('#frm');
                        $('#frm').attr('action', '/purchase/completion');
                        $('#frm').submit();
                    }, function (error) {
                        _this.transitionErrorPage(error);
                        _this.modalInstance.close();
                    }, function () {
                        alert(_this.timeoutMessage);
                        location.href = '/selection/cart';
                    });
                })
                    .catch(function (error) {
                    if (error.status === 400) {
                        _this.processTotalAmountExceededError();
                    }
                    else {
                        _this.processUnexpected();
                    }
                });
            }, function () {
                _this.processUnexpected();
            }).catch(angular.noop);
        };
        ConfirmationController.prototype.createCartImgUrl = function (code) {
            return this.ImgUrlService.createCartImgUrl(code);
        };
        ConfirmationController.prototype.back = function () {
            if (this.IdentifyPaymentService.isCredit(this.orderSlip.payment.type)) {
                $('#frm').attr('action', '/purchase/credit');
                $('#frm').submit();
                return;
            }
            if (this.IdentifyPaymentService.isConveni(this.orderSlip.payment.type)) {
                $('#frm').attr('action', '/purchase/conveni');
                $('#frm').submit();
                return;
            }
            $('#frm').attr('action', '/purchase/payment');
            $('#frm').submit();
        };
        ConfirmationController.prototype.transitionErrorPage = function (jobError) {
            var httpStatus = jobError.http_status;
            switch (httpStatus) {
                case 400:
                    break;
                case 503:
                    break;
                default:
                    this.processUnexpected();
                    return;
            }
            $('#frm').attr('action', '/purchase/completion');
            $('#frm').append($('<input>', { type: 'hidden', name: 'system_error_message', value: jobError.error_message }));
            $('#frm').append($('<input>', { type: 'hidden', name: 'http_status', value: httpStatus }));
            $('#frm').append($('<input>', {
                type: 'hidden',
                name: 'is_credit',
                value: (this.orderSlip.payment.method.id === 5)
            }));
            $('#frm').submit();
        };
        ConfirmationController.prototype.processUnexpected = function () {
            alert(this.unexpectedMessage);
            location.href = '/selection/cart';
        };
        ConfirmationController.prototype.processTotalAmountExceededError = function () {
            alert('【※お支払い総額が30万円を超えています※】\n恐れ入りますが、以下いずれかのご対応をご検討の上、再度ご注文お手続きください。\n\n・クレジットカード決済に変更する\n・ご注文商品を減らす\n\n※お支払い総額が30万円(税込)以上の場合、コンビニ決済・代金引換はご利用いただけません。\n※WIZ*ONE盤CDを購入のお客様は、マイページより再度ご注文お手続きください。\nまた、当選商品数を減らすことができないため、クレジットカード決済のみのご利用となります。\n\n※このメッセージ表示後、カート画面に戻ります。');
            location.href = '/selection/cart';
        };
        ConfirmationController.prototype.isCredit = function () {
            return this.IdentifyPaymentService.isCredit(this.orderSlip.payment.type);
        };
        return ConfirmationController;
    }());
    memecApp.ConfirmationController = ConfirmationController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var DeliveryController = (function () {
        function DeliveryController($scope, APP_CONF, $uibModal, UtilService, ShippingResource, OrderResource, OrderSlipResource, PrefectureResource, ZipCodeToAddressResource, DeliveryValidationService, JobService) {
            this.$scope = $scope;
            this.APP_CONF = APP_CONF;
            this.$uibModal = $uibModal;
            this.UtilService = UtilService;
            this.ShippingResource = ShippingResource;
            this.OrderResource = OrderResource;
            this.OrderSlipResource = OrderSlipResource;
            this.PrefectureResource = PrefectureResource;
            this.ZipCodeToAddressResource = ZipCodeToAddressResource;
            this.DeliveryValidationService = DeliveryValidationService;
            this.JobService = JobService;
            this.zip_code = {
                first: '',
                second: '',
            };
            this.lastNameErr = '';
            this.firstNameErr = '';
            this.lastNameKanaErr = '';
            this.firstNameKanaErr = '';
            this.firstZipErr = '';
            this.secondZipErr = '';
            this.prefErr = '';
            this.firstAddrErr = '';
            this.secondAddrErr = '';
            this.phoneErr = '';
            this.dispFlg = false;
            this.loadingModalMessage = '更新中';
            this.unexpectedMessage = 'ご迷惑おかけしております。\n申し訳ございませんが、再度ご操作ください';
            this.isNextBtnDisabled = false;
            this.isOnceAlertIndicate = true;
            this.SHIPPING_TYPE_NEKOPOS = 1;
            this.shippingTypes = [{ id: 0, name: '通常配送' }, { id: this.SHIPPING_TYPE_NEKOPOS, name: 'ネコポス配送' }];
            this.isSmartphone = this.UtilService.isSmartphone();
            this.zipcodeUrl = this.APP_CONF.zipcodeUrl;
            this.prefectures = this.PrefectureResource.query();
            this.prefectures.$promise.catch(angular.noop);
            this.memLoginURL = this.APP_CONF.memberLoginUrl;
            this.init();
        }
        DeliveryController.prototype.init = function () {
            this.inputErr = '';
            this.selectedShippingType = 0;
            this.newShipping = new this.ShippingResource();
            setTimeout(this.shippingInit(), 2000);
        };
        DeliveryController.prototype.shippingInit = function () {
            var _this = this;
            return function () {
                _this.orderList = _this.OrderResource.query({ limit: 1, order_status: 'valid' });
                _this.shippingList = _this.ShippingResource.query();
                _this.orderList.$promise.then(function () {
                    _this.shippingList.$promise.then(function (data) {
                        _this.dispFlg = true;
                        return _this.OrderSlipResource.get().$promise;
                    })
                        .then(function (data) {
                        _this.orderSlip = data;
                        _this.canSpecifyShippingTime = _this.orderSlip.product_group.shipping_time.length > 0;
                        var lotteryLocalIds = [1592, 1593, 1594, 1595, 1596, 1597, 1616, 1617, 1618, 1619, 1620, 1621, 1640, 1642];
                        _this.islotteryLocal = lotteryLocalIds.indexOf(_this.orderSlip.product_group.id) >= 0;
                        var targetId;
                        var foundIdFlg = false;
                        _this.orderList.forEach(function (order) {
                            _this.shippingList.forEach(function (shipping) {
                                if (shipping.id === order.shipping.id && foundIdFlg === false) {
                                    targetId = shipping.id;
                                    foundIdFlg = true;
                                }
                            });
                        });
                        if (_this.shippingList.length === 0) {
                            _this.select = 0;
                        }
                        else if (_this.UtilService.isset(data, 'shipping.id') && _this.isExistShippingId(data.shipping.id)) {
                            _this.select = data.shipping.id;
                        }
                        else if (foundIdFlg === true) {
                            _this.select = targetId;
                        }
                        else {
                            _this.select = _this.shippingList[0].id;
                        }
                    }).catch(angular.noop);
                }).catch(angular.noop);
            };
        };
        DeliveryController.prototype.delete = function (id) {
            var _this = this;
            if (this.shippingList.length <= 1) {
                alert('お届け先情報を全件削除することはできません。');
                return;
            }
            if (confirm("一度削除したデータは、元に戻せません。\n削除しても宜しいですか？")) {
                this.modalInstance = this.UtilService.showLoadingModal(this.$uibModal, this.$scope);
                this.ShippingResource.delete({ id: id })
                    .$promise.then(function () {
                    _this.modalInstance.close();
                    _this.init();
                }, function (response) {
                    if (response.data[0].code === 9999) {
                        alert('お届け先は必ず1件以上必要です。');
                        _this.modalInstance.dismiss();
                        return;
                    }
                    confirm('削除に失敗しました。もう一度お試しください');
                    _this.modalInstance.dismiss();
                }).catch(angular.noop);
            }
        };
        DeliveryController.prototype.selectShipping = function () {
            var _this = this;
            this.isNextBtnDisabled = true;
            if (this.select === 0) {
                this.inputErr = '* お届け先が選択されていません。';
                this.isNextBtnDisabled = false;
                return;
            }
            var shipping = this.shippingList.filter(function (shipping) {
                return (shipping.id === _this.select);
            }).shift();
            var errArr = [];
            var errMsgAbroadAddress = this.DeliveryValidationService.validateAbroadAddress(shipping.address.prefecture.id);
            if (errMsgAbroadAddress) {
                errArr.push(errMsgAbroadAddress);
            }
            var errMsgHangul = this.DeliveryValidationService.validateHangul(shipping.receiver.name.last, shipping.receiver.name.first, shipping.address.city, shipping.address.line);
            if (errMsgHangul) {
                errArr.push(errMsgHangul);
            }
            var errMsgSymbol = this.DeliveryValidationService.validateAddrSymbol(shipping.address.city, shipping.address.line);
            if (errMsgSymbol) {
                errArr.push(errMsgSymbol);
            }
            if (errArr.length > 0) {
                var header = this.DeliveryValidationService.getAlertHeaderSelectShipping(shipping.flags.default);
                alert(header + "\n\n" + errArr.join('\n'));
                this.isNextBtnDisabled = false;
                return;
            }
            if (this.isOnceAlertIndicate) {
                var errArrOnce = [];
                var errMsgSecondAddrOnce = this.DeliveryValidationService.validateSecondAddrOnce(shipping.address.line);
                if (errMsgSecondAddrOnce) {
                    errArrOnce.push(errMsgSecondAddrOnce);
                }
                if (errArrOnce.length > 0) {
                    this.isOnceAlertIndicate = false;
                    var headerOnce = this.DeliveryValidationService.getAlertHeaderSelectShippingOnce(shipping.flags.default);
                    alert(headerOnce + "\n\n" + errArrOnce.join('\n'));
                    this.isNextBtnDisabled = false;
                    return;
                }
            }
            if (!this.selectedShippingTimeId) {
                this.selectedShippingTimeId = 0;
            }
            this.OrderSlipResource.update({ method: 'shipping-time', id: this.selectedShippingTimeId })
                .$promise.then(function () {
                var nekoposu_use = _this.selectedShippingType === _this.SHIPPING_TYPE_NEKOPOS;
                _this.OrderSlipResource.update({ method: 'shipping', id: _this.select, nekoposu_use: nekoposu_use })
                    .$promise.then(function () {
                    $('#frm').attr('action', '/purchase/payment');
                    $('#frm').submit();
                }, function () {
                    alert(_this.unexpectedMessage);
                    _this.isNextBtnDisabled = false;
                });
            }, function () {
                alert(_this.unexpectedMessage);
                _this.isNextBtnDisabled = false;
            }).catch(angular.noop);
        };
        DeliveryController.prototype.createForm = function (id) {
            this.errorMsgClear();
            this.setNewShipping(id);
            this.shippingListTemp = angular.copy(this.shippingList);
            var template = id === 0 ? 'deliveryNew.html' : 'deliveryEdit.html';
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/' + template,
                backdrop: 'static'
            });
            this.configure_modal_action();
        };
        DeliveryController.prototype.create = function () {
            var _this = this;
            if (!this.validation()) {
                alert("\u5165\u529B\u5185\u5BB9\u306B\u8AA4\u308A\u304C\u3042\u308A\u307E\u3059\u3002\n" + this.errorMsgJoin());
                return;
            }
            this.preProcess(this.newShipping);
            this.ShippingResource.save(this.newShipping)
                .$promise.then(function (data) {
                _this.JobService.execJob('shipping', data['headers']['memec-progress-token'], function (result) {
                    _this.modalInstance.close();
                    _this.init();
                }, function (error) {
                    alert(_this.unexpectedMessage);
                    _this.modalInstance.dismiss();
                }, function (error) {
                    alert(_this.unexpectedMessage);
                    _this.modalInstance.dismiss();
                });
            }, function (error) {
                confirm('追加に失敗しました。もう一度お試しください。');
                _this.modalInstance.dismiss();
            }).catch(angular.noop);
        };
        DeliveryController.prototype.configure_loading_modal_action = function () {
            this.configure_modal_action();
        };
        DeliveryController.prototype.configure_modal_action = function () {
            var _this = this;
            this.modalInstance.result.then(function () {
            }, function () {
                _this.shippingList = _this.shippingListTemp;
            });
        };
        DeliveryController.prototype.edit = function () {
            var _this = this;
            if (!this.validation()) {
                alert("\u5165\u529B\u5185\u5BB9\u306B\u8AA4\u308A\u304C\u3042\u308A\u307E\u3059\u3002\n" + this.errorMsgJoin());
                return;
            }
            var target = (this.shippingList.filter(function (shipping) {
                return shipping.id == _this.newShippingId;
            }))[0];
            target = this.newShipping;
            this.preProcess(target);
            this.ShippingResource.update(target)
                .$promise.then(function (data) {
                _this.JobService.execJob('shipping', data['headers']['memec-progress-token'], function (result) {
                    _this.modalInstance.close();
                }, function (error) {
                    alert(_this.unexpectedMessage);
                    _this.modalInstance.dismiss();
                }, function (error) {
                    alert(_this.unexpectedMessage);
                    _this.modalInstance.dismiss();
                });
            }, function (error) {
                confirm('編集に失敗しました。もう一度お試しください。');
                _this.modalInstance.dismiss();
            }).catch(angular.noop);
        };
        DeliveryController.prototype.preProcess = function (target) {
            this.completeAddress(target);
            this.modalInstance.close();
            this.modalInstance = this.UtilService.showLoadingModal(this.$uibModal, this.$scope);
            this.configure_loading_modal_action();
        };
        DeliveryController.prototype.cancel = function () {
            this.modalInstance.dismiss();
        };
        DeliveryController.prototype.findAddr = function () {
            var _this = this;
            this.firstZipErr = this.DeliveryValidationService.validateFirstZip(this.zip_code.first);
            this.secondZipErr = this.DeliveryValidationService.validateSecondZip(this.zip_code.second);
            if (!this.firstZipErr && !this.secondZipErr) {
                var zipcode = this.ZipCodeToAddressResource.get({ zipcode: this.zip_code.first + this.zip_code.second });
                zipcode.$promise.then(function (data) {
                    if (data.results) {
                        _this.newShipping.address.prefecture.id = Number(data.results[0].prefcode);
                        _this.newShipping.address.city = data.results[0].address2 + data.results[0].address3;
                        _this.newShipping.address.line = '';
                    }
                }).catch(angular.noop);
            }
        };
        DeliveryController.prototype.completeAddress = function (shipping) {
            var address = shipping.address;
            shipping.address.prefecture.name = ((this.prefectures.filter(function (pref) {
                return pref.id == address.prefecture.id;
            }))[0]).name;
            shipping.address.text = address.prefecture.name
                + address.city
                + address.line;
            shipping.address.zip_code = this.zip_code.first + this.zip_code.second;
            shipping.phone.numbers[0] = shipping.phone.numbers[0].replace(/-/g, "");
        };
        DeliveryController.prototype.setNewShipping = function (id) {
            this.newShippingId = id;
            if (id === 0) {
                this.newShipping = new this.ShippingResource();
                this.newShipping.site_id = null;
                this.newShipping.receiver = {
                    name: {
                        last: '',
                        first: '',
                        kana: {
                            last: '',
                            first: ''
                        }
                    }
                };
                this.newShipping.address = {
                    text: '',
                    zip_code: '',
                    prefecture: {
                        id: null,
                        name: ''
                    },
                    city: '',
                    line: ''
                };
                this.newShipping.phone = {
                    numbers: [null]
                };
                this.newShipping.fee = 0;
                this.zip_code.first = '';
                this.zip_code.second = '';
                return;
            }
            this.newShipping = (this.shippingList.filter(function (shipping) {
                return shipping.id == id;
            }))[0];
            this.zip_code.first = this.newShipping.address.zip_code.substr(0, 3);
            this.zip_code.second = this.newShipping.address.zip_code.substr(3, 4);
        };
        DeliveryController.prototype.validation = function () {
            this.lastNameErr = this.DeliveryValidationService.validateLastName(this.newShipping.receiver.name.last);
            this.firstNameErr = this.DeliveryValidationService.validateFirstName(this.newShipping.receiver.name.first);
            this.lastNameKanaErr = this.DeliveryValidationService.validateLastNameKana(this.newShipping.receiver.name.kana.last);
            this.firstNameKanaErr = this.DeliveryValidationService.validateFirstNameKana(this.newShipping.receiver.name.kana.first);
            this.firstZipErr = this.DeliveryValidationService.validateFirstZip(this.zip_code.first);
            this.secondZipErr = this.DeliveryValidationService.validateSecondZip(this.zip_code.second);
            this.prefErr = this.DeliveryValidationService.validatePref(this.newShipping.address.prefecture.id);
            this.firstAddrErr = this.DeliveryValidationService.validateFirstAddr(this.newShipping.address.city);
            this.secondAddrErr = this.DeliveryValidationService.validateSecondAddr(this.newShipping.address.line);
            this.phoneErr = this.DeliveryValidationService.validatePhone(this.newShipping.phone.numbers[0]);
            if (!this.lastNameErr && !this.firstNameErr && !this.lastNameKanaErr && !this.firstNameKanaErr && !this.firstZipErr && !this.secondZipErr && !this.prefErr && !this.firstAddrErr && !this.secondAddrErr && !this.phoneErr) {
                return true;
            }
            return false;
        };
        DeliveryController.prototype.errorMsgClear = function () {
            this.lastNameErr = '';
            this.firstNameErr = '';
            this.lastNameKanaErr = '';
            this.firstNameKanaErr = '';
            this.firstZipErr = '';
            this.secondZipErr = '';
            this.prefErr = '';
            this.firstAddrErr = '';
            this.secondAddrErr = '';
            this.phoneErr = '';
        };
        DeliveryController.prototype.errorMsgJoin = function () {
            var allErr = [this.lastNameErr, this.firstNameErr, this.lastNameKanaErr, this.firstNameKanaErr, this.firstZipErr, this.secondZipErr,
                this.prefErr, this.firstAddrErr, this.secondAddrErr, this.phoneErr];
            var joinMsg = '';
            allErr.forEach(function (erorrMsg) {
                if (erorrMsg != '') {
                    joinMsg += erorrMsg + "\n";
                }
            });
            return joinMsg.trim();
        };
        DeliveryController.prototype.isExistShippingId = function (id) {
            var result = false;
            this.shippingList.forEach(function (shipping) {
                if (shipping.id === id) {
                    result = true;
                    return;
                }
            });
            return result;
        };
        DeliveryController.prototype.reOnceAlertIndicate = function () {
            this.isOnceAlertIndicate = true;
        };
        return DeliveryController;
    }());
    memecApp.DeliveryController = DeliveryController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var PaymentController = (function () {
        function PaymentController(UtilService, IdentifyPaymentService, PaymentMethodResource, OrderSlipResource, OrderSlipPaymentResource) {
            var _this = this;
            this.UtilService = UtilService;
            this.IdentifyPaymentService = IdentifyPaymentService;
            this.PaymentMethodResource = PaymentMethodResource;
            this.OrderSlipResource = OrderSlipResource;
            this.OrderSlipPaymentResource = OrderSlipPaymentResource;
            this.dispFlg = false;
            this.isNextBtnDisabled = false;
            this.isWizoneNormal = false;
            this.inputErr = '';
            this.paymentList = this.PaymentMethodResource.query();
            this.paymentList.$promise.then(function (data) {
                _this.orderSlip = _this.OrderSlipResource.get();
                return _this.orderSlip.$promise;
            })
                .then(function (data) {
                _this.dispFlg = true;
                data.items.forEach(function (item) {
                    if ([89243, 89244].indexOf(item['product_id']) >= 0) {
                        _this.isWizoneNormal = true;
                        return;
                    }
                });
                if (_this.UtilService.isset(data, 'payment.type')) {
                    _this.select = data.payment.type;
                }
                else {
                    _this.select = 0;
                }
            }).catch(angular.noop);
        }
        PaymentController.prototype.onClickNext = function () {
            var _this = this;
            this.isNextBtnDisabled = true;
            if (this.select === 0) {
                this.inputErr = '* お支払い方法が選択されていません。';
                this.isNextBtnDisabled = false;
                return;
            }
            this.OrderSlipPaymentResource.update({ method: 'type', id: Number(this.select) })
                .$promise.then(function () {
                if (_this.IdentifyPaymentService.isCredit(Number(_this.select))) {
                    $('#frm').attr('action', '/purchase/credit');
                    $('#frm').submit();
                }
                else if (_this.IdentifyPaymentService.isCash(Number(_this.select))) {
                    $('#frm').attr('action', '/purchase/confirmation');
                    $('#frm').submit();
                }
                else if (_this.IdentifyPaymentService.isConveni(Number(_this.select))) {
                    $('#frm').attr('action', '/purchase/conveni');
                    $('#frm').submit();
                }
            }).catch(function (error) {
                alert('購入手続きが切断されました。\nお手数ですが、再度カート画面よりご購入お手続きをお願いします。\n※自動的にカート画面に戻ります。');
                location.href = '/selection/cart';
            });
        };
        PaymentController.prototype.back = function () {
            $('#frm').attr('action', '/purchase/delivery');
            $('#frm').submit();
        };
        return PaymentController;
    }());
    memecApp.PaymentController = PaymentController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CreditController = (function () {
        function CreditController(APP_CONF, CreditValidationService, CreditResource, OrderSlipResource, OrderSlipPaymentResource, VeritransTokenResource, JobService) {
            this.APP_CONF = APP_CONF;
            this.CreditValidationService = CreditValidationService;
            this.CreditResource = CreditResource;
            this.OrderSlipResource = OrderSlipResource;
            this.OrderSlipPaymentResource = OrderSlipPaymentResource;
            this.VeritransTokenResource = VeritransTokenResource;
            this.JobService = JobService;
            this.credit = '';
            this.month = '';
            this.year = '';
            this.paymentType = '';
            this.code = '';
            this.pastCardPaymentType = '';
            this.settlementErr = '';
            this.creditErr = '';
            this.monthErr = '';
            this.yearErr = '';
            this.paymentTypeErr = '';
            this.codeErr = '';
            this.pastCardSelectErr = '';
            this.pastCardPaymentTypeErr = '';
            this.isNextBtnDisabled = false;
            this.select = null;
            this.pastCardList = this.CreditResource.query();
            this.pastCardList.$promise.catch(angular.noop);
        }
        CreditController.prototype.payByPastCard = function () {
            var _this = this;
            this.isNextBtnDisabled = true;
            this.pastCardSelectErr = this.CreditValidationService.validatePastCardSelect(this.select);
            if (this.pastCardSelectErr) {
                this.isNextBtnDisabled = false;
                return;
            }
            this.OrderSlipPaymentResource.update({ method: 'card-record', id: this.select })
                .$promise.then(function (data) {
                $('#frm').attr('action', '/purchase/confirmation');
                $('#frm').submit();
            })
                .catch(function (error) {
                _this.isNextBtnDisabled = false;
            });
        };
        CreditController.prototype.payByNewCard = function () {
            var _this = this;
            this.isNextBtnDisabled = true;
            this.settlementErr = '';
            this.creditErr = this.CreditValidationService.validateCredit(this.credit);
            this.monthErr = this.CreditValidationService.validateMonth(this.month);
            this.yearErr = this.CreditValidationService.validateYear(this.year);
            this.codeErr = this.CreditValidationService.validateCode(this.code);
            if (!this.monthErr && !this.yearErr) {
                this.monthErr = this.CreditValidationService.validateExpiration(this.month, this.year);
            }
            if (this.creditErr || this.monthErr || this.yearErr || this.codeErr) {
                this.isNextBtnDisabled = false;
                return;
            }
            var requestParams = {
                token_api_key: this.APP_CONF.veritransTokenApiKey,
                card_number: this.credit.replace(/-/g, ""),
                card_expire: this.month + '/' + this.year,
                security_code: this.code,
                lang: 'ja',
            };
            var veritransToken = this.VeritransTokenResource.save(requestParams);
            veritransToken.$promise
                .then(function () {
                _this.OrderSlipPaymentResource.update({
                    method: 'new-card',
                    veritrans_token: veritransToken.token,
                    veritrans_token_expire: veritransToken.token_expire_date
                })
                    .$promise.then(function (data) {
                    $('#frm').attr('action', '/purchase/confirmation');
                    $('#frm').submit();
                })
                    .catch(function (error) {
                    _this.settlementErr = error.data.error;
                    _this.isNextBtnDisabled = false;
                });
            })
                .catch(function (error) {
                if (error.status <= 0) {
                    alert('ご迷惑おかけしております。時間をおいて再度ご操作ください');
                }
                else {
                    alert('ご入力のカード情報にお間違いがないかご確認ください。');
                }
                _this.isNextBtnDisabled = false;
            });
        };
        CreditController.prototype.back = function () {
            $('#frm').attr('action', '/purchase/payment');
            $('#frm').submit();
        };
        return CreditController;
    }());
    memecApp.CreditController = CreditController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ConveniController = (function () {
        function ConveniController(ConveniResource, MeResource, OrderSlipResource, OrderSlipPaymentResource, JobService) {
            var _this = this;
            this.ConveniResource = ConveniResource;
            this.MeResource = MeResource;
            this.OrderSlipResource = OrderSlipResource;
            this.OrderSlipPaymentResource = OrderSlipPaymentResource;
            this.JobService = JobService;
            this.userName = 'Now Loading...';
            this.userTellNum = 'Now Loading...';
            this.dispFlg = false;
            this.isNextBtnDisabled = false;
            this.conveniList = this.ConveniResource.query();
            this.conveniList.$promise.then(function (data) {
                _this.dispFlg = true;
            }).catch(angular.noop);
            this.userInfo = this.MeResource.get();
            this.userInfo.$promise.then(function (data) {
                _this.userName = _this.userInfo.name.kana.last + ' ' + _this.userInfo.name.kana.first;
                _this.userTellNum = _this.userInfo.tel.numbers.shift();
            }).catch(angular.noop);
            this.select = '0';
            this.inputErr = '';
        }
        ConveniController.prototype.payByConveni = function () {
            var _this = this;
            this.isNextBtnDisabled = true;
            if (this.select === '0') {
                this.inputErr = '* コンビニエンスストアが選択されていません。';
                this.isNextBtnDisabled = false;
                return;
            }
            this.OrderSlipPaymentResource.update({ method: 'convenience-store', id: this.select })
                .$promise.then(function (data) {
                $('#frm').attr('action', '/purchase/confirmation');
                $('#frm').submit();
            })
                .catch(function (error) {
                _this.isNextBtnDisabled = false;
            });
        };
        ConveniController.prototype.back = function () {
            $('#frm').attr('action', '/purchase/payment');
            $('#frm').submit();
        };
        return ConveniController;
    }());
    memecApp.ConveniController = ConveniController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CompletionController = (function () {
        function CompletionController(APP_CONF, UtilService, BannerService) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.UtilService = UtilService;
            this.BannerService = BannerService;
            this.bannerDomain = this.APP_CONF.resourceUrl;
            this.isSmartphone = this.UtilService.isSmartphone();
            this.BannerService.fetchBannerList(0, 'completion', 'main', function (data) {
                _this.bannerList = data;
            });
        }
        return CompletionController;
    }());
    memecApp.CompletionController = CompletionController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ShippingResource = (function () {
        function ShippingResource($resource) {
            return $resource('/api/v1/shipping/:id', { id: '@id' }, {
                update: {
                    method: 'PUT',
                    transformResponse: function (data, headers) {
                        var response = {
                            data: data,
                            headers: headers
                        };
                        response.data = data;
                        response.headers = headers();
                        return response;
                    }
                },
                save: {
                    method: 'POST',
                    transformResponse: function (data, headers) {
                        var response = {
                            data: data,
                            headers: headers
                        };
                        response.data = data;
                        response.headers = headers();
                        return response;
                    }
                }
            });
        }
        return ShippingResource;
    }());
    memecApp.ShippingResource = ShippingResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var OrderSlipResource = (function () {
        function OrderSlipResource($resource) {
            return $resource('/api/v1/order-slip/:method/:id', { method: '@method', id: '@id' }, {
                update: { method: 'PUT' },
                save: {
                    method: 'POST',
                    transformResponse: function (data, headers) {
                        var response = {
                            data: data,
                            headers: headers
                        };
                        response.data = data;
                        response.headers = headers();
                        return response;
                    }
                }
            });
        }
        return OrderSlipResource;
    }());
    memecApp.OrderSlipResource = OrderSlipResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var OrderSlipPaymentResource = (function () {
        function OrderSlipPaymentResource($resource) {
            return $resource('/api/v1/order-slip/payment-method/:method/:id', { method: '@method', id: '@id' }, {
                update: { method: 'PUT' }
            });
        }
        return OrderSlipPaymentResource;
    }());
    memecApp.OrderSlipPaymentResource = OrderSlipPaymentResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CreditResource = (function () {
        function CreditResource($resource) {
            return $resource('/api/v1/cards/:id', { id: '@id' }, {
                update: { method: 'PUT' }
            });
        }
        return CreditResource;
    }());
    memecApp.CreditResource = CreditResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ConveniResource = (function () {
        function ConveniResource($resource) {
            return $resource('/api/v1/convenience-stores', {}, {});
        }
        return ConveniResource;
    }());
    memecApp.ConveniResource = ConveniResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var PrefectureResource = (function () {
        function PrefectureResource($resource) {
            return $resource('/api/v1/prefectures/:id', { id: '@id' });
        }
        return PrefectureResource;
    }());
    memecApp.PrefectureResource = PrefectureResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ZipCodeToAddressResource = (function () {
        function ZipCodeToAddressResource($resource) {
            return $resource('/api/v1/zipcodetoaddress/:zipcode', { zipcode: '@zipcode' }, {});
        }
        return ZipCodeToAddressResource;
    }());
    memecApp.ZipCodeToAddressResource = ZipCodeToAddressResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CreditValidationService = (function () {
        function CreditValidationService() {
        }
        CreditValidationService.prototype.validateCredit = function (credit) {
            if (!credit) {
                return '※ クレジットカード番号が入力されていません。';
            }
            var result = credit.replace(/-/g, "");
            if (result.match(/^\d{14,16}$/) == null) {
                return '※ クレジットカード番号は14桁〜16桁の半角数字で入力してください。';
            }
            return '';
        };
        CreditValidationService.prototype.validateMonth = function (month) {
            if (!month) {
                return '※ 有効期限(月)が入力されていません。';
            }
            if (month.match(/^\d{2}$/) == null) {
                return '※ 有効期限(月)は2桁の半角数字で入力してください。';
            }
            return '';
        };
        CreditValidationService.prototype.validateYear = function (year) {
            if (!year) {
                return '※ 有効期限(年)が入力されていません。';
            }
            if (year.match(/^\d{2}$/) == null) {
                return '※ 有効期限(年)は2桁の半角数字で入力してください。';
            }
            return '';
        };
        CreditValidationService.prototype.validatePastCardSelect = function (pastCardSelect) {
            if (!pastCardSelect) {
                return '※ カードが選択されていません。';
            }
            return '';
        };
        CreditValidationService.prototype.validatePaymentType = function (paymentType) {
            if (!paymentType) {
                return '※ 支払方法が入力されていません。';
            }
            return '';
        };
        CreditValidationService.prototype.validateCode = function (code) {
            if (!code) {
                return '※ セキュリティコードが入力されていません。';
            }
            if (code.match(/^\d{3,4}$/) == null) {
                return '※ セキュリティコードは3桁以上の半角数字で入力してください。';
            }
            return '';
        };
        CreditValidationService.prototype.validateExpiration = function (month, year) {
            var int_year = parseInt('20' + year);
            var int_month = parseInt(month) - 1;
            if (int_month > 11) {
                return '※不正な年月です。';
            }
            var now = new Date();
            var expDate = new Date(int_year, int_month, 1, 0, 0, 0);
            var lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1, 0, 0, 0);
            if (expDate < lastMonth) {
                return '※有効期限をご確認下さい。';
            }
            return '';
        };
        return CreditValidationService;
    }());
    memecApp.CreditValidationService = CreditValidationService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var DeliveryValidationService = (function () {
        function DeliveryValidationService() {
            this.regHangul = /[가-힣]/;
        }
        DeliveryValidationService.prototype.validateLastName = function (lastName) {
            if (!lastName) {
                return '※ お名前(姓)が入力されていません。';
            }
            if (lastName.match(/\s|　/) != null) {
                return '※ お名前(姓)にスペース、タブ、改行は使用できません。';
            }
            if (lastName.match(this.regHangul) != null) {
                return '※ お名前(姓)にハングル文字は使用できません(Please input in Japanese)';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateFirstName = function (firstName) {
            if (!firstName) {
                return '※ お名前(名)が入力されていません。';
            }
            if (firstName.match(/\s|　/) != null) {
                return '※ お名前(名)にスペース、タブ、改行は使用できません。';
            }
            if (firstName.match(this.regHangul) != null) {
                return '※ お名前(名)にハングル文字は使用できません(Please input in Japanese)';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateLastNameKana = function (lastNameKana) {
            if (!lastNameKana) {
                return '※ お名前(ローマ字・姓)が入力されていません。';
            }
            if (lastNameKana.match(/^[a-zA-Z]*$/) == null) {
                return '※ お名前(ローマ字・姓)は半角英字で入力してください。';
            }
            if (lastNameKana.match(/\s|　/) != null) {
                return '※ お名前(ローマ字・姓)にスペース、タブ、改行は使用できません。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateFirstNameKana = function (firstNameKana) {
            if (!firstNameKana) {
                return '※ お名前(ローマ字・名)が入力されていません。';
            }
            if (firstNameKana.match(/^[a-zA-Z]*$/) == null) {
                return '※ お名前(ローマ字・名)は半角英字で入力してください。';
            }
            if (firstNameKana.match(/\s|　/) != null) {
                return '※ お名前(ローマ字・名)にスペース、タブ、改行は使用できません。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateFirstZip = function (firstZip) {
            if (!firstZip) {
                return '※ 郵便番号1が入力されていません。';
            }
            if (firstZip.match(/^\d{3}$/) == null) {
                return '※ 郵便番号1は3桁の半角数字で入力してください。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateSecondZip = function (secondZip) {
            if (!secondZip) {
                return '※ 郵便番号2が入力されていません。';
            }
            if (secondZip.match(/^\d{4}$/) == null) {
                return '※ 郵便番号2は4桁の半角数字で入力してください。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validatePref = function (pref) {
            if (!pref) {
                return '※ 都道府県が入力されていません。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateAbroadAddress = function (pref) {
            if (!pref) {
                return '※ 海外住所はご利用いただけません。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateHangul = function (lastName, firstName, firstAddr, secondAddr) {
            var errArr = [];
            if (lastName.match(this.regHangul) != null) {
                errArr.push('※ お名前(姓)にハングル文字は使用できません(Please input in Japanese)');
            }
            if (firstName.match(this.regHangul) != null) {
                errArr.push('※ お名前(名)にハングル文字は使用できません(Please input in Japanese)');
            }
            if (firstAddr.match(this.regHangul) != null) {
                errArr.push('※ 市区町村名にハングル文字は使用できません(Please input in Japanese)');
            }
            if (secondAddr.match(this.regHangul) != null) {
                errArr.push('※ 番地・ビル名にハングル文字は使用できません(Please input in Japanese)');
            }
            return errArr.join('\n');
        };
        DeliveryValidationService.prototype.validateFirstAddr = function (firstAddr) {
            if (!firstAddr) {
                return '※ 市区町村名が入力されていません。';
            }
            if (firstAddr.match(this.regHangul) != null) {
                return '※ 市区町村名にハングル文字は使用できません(Please input in Japanese)';
            }
            if (firstAddr.match(/[,，]/) != null) {
                return '※ 市区町村名に「，」(カンマ)は使用できません。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateSecondAddr = function (secondAddr) {
            if (!secondAddr) {
                return '※ 番地・ビル名が入力されていません。';
            }
            if (secondAddr.match(this.regHangul) != null) {
                return '※ 番地・ビル名にハングル文字は使用できません(Please input in Japanese)';
            }
            if (secondAddr.match(/[,，]/) != null) {
                return '※ 番地・ビル名に「，」(カンマ)は使用できません。';
            }
            return '';
        };
        DeliveryValidationService.prototype.validateAddrSymbol = function (firstAddr, secondAddr) {
            var errArr = [];
            if (firstAddr.match(/[,，]/) != null) {
                errArr.push('※ 市区町村名に「，」(カンマ)は使用できません。');
            }
            if (secondAddr.match(/[,，]/) != null) {
                errArr.push('※ 番地・ビル名に「，」(カンマ)は使用できません。');
            }
            return errArr.join('\n');
        };
        DeliveryValidationService.prototype.validatePhone = function (phone) {
            if (!phone) {
                return '※ 電話番号が入力されていません。';
            }
            var result = phone.replace(/-/g, "");
            if (result.match(/^0[0-9]{9,10}$/) == null) {
                return '※ 電話番号は10桁又は11桁の半角数字で入力してください。';
            }
            return '';
        };
        DeliveryValidationService.prototype.getAlertHeaderSelectShipping = function (default_flg) {
            if (default_flg) {
                return '選択されたお届け先に以下の不備がございます。\nWIZ*ONEアカウントサービスより修正をお願いします。\n「お届け先を追加する」ボタンより、OFFICIAL SHOP配送専用住所を追加いただくことも可能です。';
            }
            return '選択されたお届け先に以下の不備がございます。\n編集ボタンより修正後、再度お試しください。';
        };
        DeliveryValidationService.prototype.getAlertHeaderSelectShippingOnce = function (default_flg) {
            if (default_flg) {
                return 'お届け先住所に以下いずれかの不備がある可能性がございます。\nご確認の上、不備がある場合はWIZ*ONEアカウントサービスより修正をお願いします。\n「お届け先を追加する」ボタンより、OFFICIAL SHOP配送専用住所を追加いただくことも可能です。';
            }
            return 'お届け先住所に以下いずれかの不備がある可能性がございます。\nご確認の上、不備がある場合は編集ボタンより修正をお願いいたします。';
        };
        DeliveryValidationService.prototype.validateSecondAddrOnce = function (secondAddr) {
            if (secondAddr.match(/[0-9]/) == null) {
                return '・番地が抜けている\n・建物名が抜けている\n・部屋番号が抜けている';
            }
            return '';
        };
        return DeliveryValidationService;
    }());
    memecApp.DeliveryValidationService = DeliveryValidationService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var PaymentMethodResource = (function () {
        function PaymentMethodResource($resource) {
            return $resource('/api/v1/payment-methods/:paymentId', { paymentId: '@paymentId' });
        }
        return PaymentMethodResource;
    }());
    memecApp.PaymentMethodResource = PaymentMethodResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MypageTopController = (function () {
        function MypageTopController(APP_CONF, $scope, $uibModal, ImgUrlService, OrderResource, ClaspTicketResource, MeResource, FavoriteResource, TicketEventResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.$scope = $scope;
            this.$uibModal = $uibModal;
            this.ImgUrlService = ImgUrlService;
            this.OrderResource = OrderResource;
            this.ClaspTicketResource = ClaspTicketResource;
            this.MeResource = MeResource;
            this.FavoriteResource = FavoriteResource;
            this.TicketEventResource = TicketEventResource;
            this.userName = 'Now Loading...';
            this.len = 5;
            this.start = 0;
            this.historyDispFlg = false;
            this.claspTicketDispFlg = false;
            this.favoriteDispFlg = false;
            this.now = new Date();
            this.electedUrl = this.APP_CONF.electedUrl;
            this.lotteryUrl = this.APP_CONF.lotteryUrl;
            this.fukubukuroLpUrl = this.APP_CONF.fukubukuroLpUrl;
            this.userInfo = this.MeResource.get();
            this.userInfo.$promise.then(function (data) {
                _this.userName = 'ようこそ！ ' + _this.userInfo.name.last + ' ' + _this.userInfo.name.first + ' さん';
            }).catch(angular.noop);
            this.TicketEventResource.query()
                .$promise.then(function (data) {
                _this.ticketProductIdList = data.map(function (element, index, array) {
                    return element.product.id;
                });
                _this.OrderResource.query({ limit: _this.len, order_status: 'valid' })
                    .$promise.then(function (data) {
                    _this.orderList = (data.filter(function (order) {
                        if (order.status.id === 7 || order.status.id === 31) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }));
                    _this.historyDispFlg = true;
                }).catch(angular.noop);
            }).catch(angular.noop);
            this.claspTicketList = this.ClaspTicketResource.query({ limit: this.len, status: 'all' });
            this.claspTicketList.$promise.then(function (data) {
                _this.claspTicketDispFlg = true;
            }).catch(angular.noop);
        }
        MypageTopController.prototype.createCartImgUrl = function (code) {
            return this.ImgUrlService.createCartImgUrl(code);
        };
        MypageTopController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        MypageTopController.prototype.isTicketProduct = function (product_id) {
            return !(this.ticketProductIdList.indexOf(product_id) === -1);
        };
        return MypageTopController;
    }());
    memecApp.MypageTopController = MypageTopController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var HistoryController = (function () {
        function HistoryController(OrderResource, TicketEventResource) {
            var _this = this;
            this.OrderResource = OrderResource;
            this.TicketEventResource = TicketEventResource;
            this.cnt = 0;
            this.pageList = [];
            this.pageItemsBaseSize = 10;
            this.pageStartPos = 0;
            this.canFetchNext = true;
            this.statusValid = 'valid';
            this.statusPacking = 'packing';
            this.statusShipping = 'shipping';
            this.isAddingOrder = false;
            this.dispFlg = false;
            this.pageItems = this.pageItemsBaseSize;
            this.TicketEventResource.query()
                .$promise.then(function (data) {
                _this.ticketProductIdList = data.map(function (element, index, array) {
                    return element.product.id;
                });
                _this.init();
            }).catch(angular.noop);
        }
        HistoryController.prototype.init = function () {
            this.orderStatus = this.statusValid;
            this.selectedOrderList = [];
            this.fetchNext(0, this.pageItemsBaseSize);
        };
        HistoryController.prototype.more = function () {
            var amount = this.selectedOrderList.length;
            if (amount > 0) {
                this.fetchNext(this.selectedOrderList[amount - 1].id, this.pageItemsBaseSize);
            }
        };
        HistoryController.prototype.showOrderList = function (orderStatus) {
            this.selectedOrderList = [];
            this.dispFlg = false;
            this.canFetchNext = true;
            this.orderStatus = orderStatus;
            this.fetchNext(0, this.pageItemsBaseSize);
        };
        HistoryController.prototype.fetchNext = function (orderIdLessThan, size) {
            var _this = this;
            this.isAddingOrder = true;
            var orderList = this.OrderResource.query({
                first_id: orderIdLessThan,
                limit: size,
                order_status: this.orderStatus
            });
            orderList.$promise.then(function (data) {
                if (data.length < _this.pageItemsBaseSize) {
                    _this.canFetchNext = false;
                }
                var fetched = angular.copy(data);
                for (var _i = 0, fetched_5 = fetched; _i < fetched_5.length; _i++) {
                    var order = fetched_5[_i];
                    _this.selectedOrderList.push(order);
                }
                _this.cnt = _this.selectedOrderList.length;
                _this.isAddingOrder = false;
                _this.dispFlg = true;
            }).catch(angular.noop);
        };
        HistoryController.prototype.isTicketProduct = function (product_id) {
            return !(this.ticketProductIdList.indexOf(product_id) === -1);
        };
        return HistoryController;
    }());
    memecApp.HistoryController = HistoryController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var HistoryDetailController = (function () {
        function HistoryDetailController(APP_CONF, IdentifyPaymentService, $scope, $uibModal, OrderResource, ImgUrlService, MailLogResource, TicketEventResource, OrderShippingResource, ZipCodeToAddressResource, DeliveryValidationService, UtilService, JobService) {
            this.APP_CONF = APP_CONF;
            this.IdentifyPaymentService = IdentifyPaymentService;
            this.$scope = $scope;
            this.$uibModal = $uibModal;
            this.OrderResource = OrderResource;
            this.ImgUrlService = ImgUrlService;
            this.MailLogResource = MailLogResource;
            this.TicketEventResource = TicketEventResource;
            this.OrderShippingResource = OrderShippingResource;
            this.ZipCodeToAddressResource = ZipCodeToAddressResource;
            this.DeliveryValidationService = DeliveryValidationService;
            this.UtilService = UtilService;
            this.JobService = JobService;
            this.dispFlg = false;
            this.lastNameErr = '';
            this.firstNameErr = '';
            this.lastNameKanaErr = '';
            this.firstNameKanaErr = '';
            this.firstZipErr = '';
            this.secondZipErr = '';
            this.prefErr = '';
            this.firstAddrErr = '';
            this.secondAddrErr = '';
            this.phoneErr = '';
            this.zip_code = {
                first: '',
                second: '',
            };
            this.identifyPayment = this.IdentifyPaymentService;
        }
        HistoryDetailController.prototype.init = function (orderId) {
            var _this = this;
            this.orderId = orderId;
            this.order = this.OrderResource.get({ orderId: orderId });
            this.order.$promise.then(function () {
                _this.dispFlg = true;
                _this.checkTicketProduct();
            }).catch(function (error) {
                location.href = '/404';
            });
            this.mailLogList = this.MailLogResource.query({ id: orderId });
            this.mailLogList.$promise.catch(angular.noop);
        };
        HistoryDetailController.prototype.convertToMilliseconds = function (date) {
            var dateSent = new Date(date.replace(/-/g, '/'));
            return dateSent.getTime();
        };
        HistoryDetailController.prototype.toContact = function () {
            location.href = '/contact/' + this.orderId;
        };
        HistoryDetailController.prototype.showMailModal = function (mailLog) {
            this.mailLog = mailLog;
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/historyMail.html',
                backdrop: 'true'
            });
            this.modalInstance.result.catch(angular.noop);
        };
        HistoryDetailController.prototype.dismissModal = function () {
            this.modalInstance.dismiss();
        };
        HistoryDetailController.prototype.close = function () {
            this.modalInstance.close();
        };
        HistoryDetailController.prototype.createForm = function () {
            this.errorMsgClear();
            this.setOrderShipping();
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/orderShipping.html',
                backdrop: 'static'
            });
            this.modalInstance.result.then(function () { }, function () { });
        };
        HistoryDetailController.prototype.edit = function () {
            var _this = this;
            if (!this.validation()) {
                alert("\u5165\u529B\u5185\u5BB9\u306B\u8AA4\u308A\u304C\u3042\u308A\u307E\u3059\u3002\n" + this.errorMsgJoin());
                return;
            }
            this.completeAddress();
            this.modalInstance.close();
            this.modalInstance = this.UtilService.showLoadingModal(this.$uibModal, this.$scope);
            this.modalInstance.result.then(function () {
                alert('お届け先を変更しました。');
                location.reload();
            }, function () { });
            this.OrderShippingResource.update(this.orderShipping)
                .$promise.then(function (data) {
                _this.JobService.execJob('orders', data['headers']['memec-progress-token'], function (result) {
                    _this.modalInstance.close();
                }, function (error) {
                    alert('ご迷惑おかけしております。\n申し訳ございませんが、再度ご操作ください');
                    _this.modalInstance.dismiss();
                }, function (error) {
                    alert('ご迷惑おかけしております。\n申し訳ございませんが、再度ご操作ください');
                    _this.modalInstance.dismiss();
                });
            }, function (error) {
                confirm('編集に失敗しました。もう一度お試しください。');
                _this.modalInstance.dismiss();
            }).catch(angular.noop);
        };
        HistoryDetailController.prototype.findAddr = function () {
            var _this = this;
            this.firstZipErr = this.DeliveryValidationService.validateFirstZip(this.zip_code.first);
            this.secondZipErr = this.DeliveryValidationService.validateSecondZip(this.zip_code.second);
            if (!this.firstZipErr && !this.secondZipErr) {
                var zipcode = this.ZipCodeToAddressResource.get({ zipcode: this.zip_code.first + this.zip_code.second });
                zipcode.$promise.then(function (data) {
                    if (data.results) {
                        _this.orderShipping.shipping.address.prefecture.id = data.results[0].prefcode;
                        _this.orderShipping.shipping.address.city = data.results[0].address2 + data.results[0].address3;
                        _this.orderShipping.shipping.address.line = '';
                    }
                }).catch(angular.noop);
            }
        };
        HistoryDetailController.prototype.cancel = function () {
            this.modalInstance.dismiss();
        };
        HistoryDetailController.prototype.checkTicketProduct = function () {
            var _this = this;
            this.TicketEventResource.query()
                .$promise.then(function (data) {
                var ticketProductIdList = data.map(function (element, index, array) {
                    return element.product.id;
                });
                _this.isTicketProduct = !(ticketProductIdList.indexOf(_this.order.items[0].product_id) === -1);
            }).catch(angular.noop);
        };
        HistoryDetailController.prototype.errorMsgClear = function () {
            this.lastNameErr = '';
            this.firstNameErr = '';
            this.lastNameKanaErr = '';
            this.firstNameKanaErr = '';
            this.firstZipErr = '';
            this.secondZipErr = '';
            this.prefErr = '';
            this.firstAddrErr = '';
            this.secondAddrErr = '';
            this.phoneErr = '';
        };
        HistoryDetailController.prototype.setOrderShipping = function () {
            this.orderShipping = new this.OrderShippingResource();
            this.orderShipping.id = Number(this.orderId);
            this.orderShipping.shipping = {
                receiver: {
                    name: {
                        last: this.order.shipping.receiver.name.last,
                        first: this.order.shipping.receiver.name.first,
                        kana: {
                            last: this.order.shipping.receiver.name.kana.last,
                            first: this.order.shipping.receiver.name.kana.first
                        }
                    }
                },
                address: {
                    zip_code: this.order.shipping.address.zip_code,
                    prefecture: {
                        id: this.order.shipping.address.prefecture.id,
                        name: this.order.shipping.address.prefecture.name
                    },
                    city: this.order.shipping.address.city,
                    line: this.order.shipping.address.line[0]
                },
                phone: {
                    numbers: this.order.shipping.phone.numbers
                }
            };
            this.zip_code.first = this.order.shipping.address.zip_code.substr(0, 3);
            this.zip_code.second = this.order.shipping.address.zip_code.substr(3, 4);
            return;
        };
        HistoryDetailController.prototype.validation = function () {
            this.lastNameErr = this.DeliveryValidationService.validateLastName(this.orderShipping.shipping.receiver.name.last);
            this.firstNameErr = this.DeliveryValidationService.validateFirstName(this.orderShipping.shipping.receiver.name.first);
            this.lastNameKanaErr = this.DeliveryValidationService.validateLastNameKana(this.orderShipping.shipping.receiver.name.kana.last);
            this.firstNameKanaErr = this.DeliveryValidationService.validateFirstNameKana(this.orderShipping.shipping.receiver.name.kana.first);
            this.firstZipErr = this.DeliveryValidationService.validateFirstZip(this.zip_code.first);
            this.secondZipErr = this.DeliveryValidationService.validateSecondZip(this.zip_code.second);
            this.prefErr = this.DeliveryValidationService.validatePref(this.orderShipping.shipping.address.prefecture.id);
            this.firstAddrErr = this.DeliveryValidationService.validateFirstAddr(this.orderShipping.shipping.address.city);
            this.secondAddrErr = this.DeliveryValidationService.validateSecondAddr(this.orderShipping.shipping.address.line);
            this.phoneErr = this.DeliveryValidationService.validatePhone(this.orderShipping.shipping.phone.numbers[0]);
            if (!this.lastNameErr && !this.firstNameErr && !this.lastNameKanaErr && !this.firstNameKanaErr && !this.firstZipErr && !this.secondZipErr && !this.prefErr && !this.firstAddrErr && !this.secondAddrErr && !this.phoneErr) {
                return true;
            }
            return false;
        };
        HistoryDetailController.prototype.errorMsgJoin = function () {
            var allErr = [this.lastNameErr, this.firstNameErr, this.lastNameKanaErr, this.firstNameKanaErr, this.firstZipErr, this.secondZipErr,
                this.prefErr, this.firstAddrErr, this.secondAddrErr, this.phoneErr];
            var joinMsg = '';
            allErr.forEach(function (erorrMsg) {
                if (erorrMsg != '') {
                    joinMsg += erorrMsg + "\n";
                }
            });
            return joinMsg.trim();
        };
        HistoryDetailController.prototype.completeAddress = function () {
            this.orderShipping.shipping.address.prefecture.name = 'dummy';
            this.orderShipping.shipping.address.zip_code = this.zip_code.first + this.zip_code.second;
            this.orderShipping.shipping.phone.numbers[0] = this.orderShipping.shipping.phone.numbers[0].replace(/-/g, "");
        };
        HistoryDetailController.prototype.convertDeliveryCompany = function ($delivery) {
            var company = $delivery ? $delivery.replace(/.*\//g, '') : 'ヤマト';
            return company == '佐川' ? '佐川急便' : 'ヤマト運輸';
        };
        return HistoryDetailController;
    }());
    memecApp.HistoryDetailController = HistoryDetailController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var FavoriteController = (function () {
        function FavoriteController(ImgUrlService, FavoriteResource) {
            this.ImgUrlService = ImgUrlService;
            this.FavoriteResource = FavoriteResource;
            this.pageList = [];
            this.pageItemsBaseSize = 10;
            this.pageStartPos = 0;
            this.dispFlg = false;
            this.init();
            this.pageItems = this.pageItemsBaseSize;
        }
        FavoriteController.prototype.init = function () {
            var _this = this;
            this.favorite = this.FavoriteResource.query();
            this.favorite.$promise.then(function () {
                _this.dispFlg = true;
                _this.pageList = [];
                var maxPage = Math.floor((_this.favorite.length - 1) / _this.pageItems);
                for (var i = 0; i <= maxPage; i++) {
                    _this.pageList.push(i + 1);
                }
            }).catch(angular.noop);
        };
        FavoriteController.prototype.pager = function (page) {
            if (page === -1) {
                this.pageItems = this.pageItems + this.pageItemsBaseSize;
            }
            else {
            }
        };
        FavoriteController.prototype.delete = function (id) {
            var _this = this;
            this.FavoriteResource.delete({ product_id: id })
                .$promise.then(function (data) {
                _this.init();
            }).catch(angular.noop);
        };
        FavoriteController.prototype.createCartImgUrl = function (code) {
            return this.ImgUrlService.createCartImgUrl(code);
        };
        return FavoriteController;
    }());
    memecApp.FavoriteController = FavoriteController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var EzineController = (function () {
        function EzineController(APP_CONF, EzineResource, MeResource) {
            var _this = this;
            this.APP_CONF = APP_CONF;
            this.EzineResource = EzineResource;
            this.MeResource = MeResource;
            this.email = 'Now Loading...';
            this.memLoginURL = this.APP_CONF.memberLoginUrl;
            this.ezine = this.EzineResource.get();
            this.ezine.$promise.catch(angular.noop);
            this.MeResource.get()
                .$promise.then(function (data) {
                if (data.emails[0]) {
                    _this.email = data.emails[0];
                }
                else {
                    _this.email = '未設定';
                }
            }).catch(angular.noop);
        }
        EzineController.prototype.onClick = function () {
            var _this = this;
            this.EzineResource.update({
                subscribed: this.ezine.subscribed
            })
                .$promise.then(function () {
                if (_this.ezine.subscribed) {
                    alert('登録しました。');
                    return;
                }
                alert('解除しました。');
            }).catch(angular.noop);
        };
        return EzineController;
    }());
    memecApp.EzineController = EzineController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ClaspTicketController = (function () {
        function ClaspTicketController(ClaspTicketResource, TicketEventResource) {
            this.ClaspTicketResource = ClaspTicketResource;
            this.TicketEventResource = TicketEventResource;
            this.pageStartPos = 0;
            this.pageItemsBaseSize = 10;
            this.statusAll = 'all';
            this.statusWin = 'win';
            this.statusPayment = 'payment';
            this.dispFlg = false;
            this.cnt = 0;
            this.canFetchNext = true;
            this.isAddingClaspTicket = false;
            this.now = new Date();
            this.selectedContentStatus = this.statusAll;
            this.eventList = this.TicketEventResource.query();
            this.eventList.$promise.catch(angular.noop);
            this.selectedEventStatus = '0';
            this.claspTicketList = [];
            this.fetchNext('0', this.pageItemsBaseSize);
        }
        ClaspTicketController.prototype.more = function () {
            var amount = this.claspTicketList.length;
            if (amount > 0) {
                this.fetchNext(this.claspTicketList[amount - 1].id, this.pageItemsBaseSize);
            }
        };
        ClaspTicketController.prototype.showClaspTicketList = function () {
            this.claspTicketList = [];
            this.dispFlg = false;
            this.canFetchNext = true;
            this.fetchNext('0', this.pageItemsBaseSize);
        };
        ClaspTicketController.prototype.fetchNext = function (claspTicketIdLessThan, size) {
            var _this = this;
            this.isAddingClaspTicket = true;
            var param = { limit: size, status: this.selectedContentStatus };
            if (claspTicketIdLessThan !== '0') {
                param['first_id'] = claspTicketIdLessThan;
            }
            if (this.selectedEventStatus !== '0') {
                param['event_id'] = Number(this.selectedEventStatus);
            }
            this.ClaspTicketResource.query(param)
                .$promise.then(function (data) {
                if (data.length < _this.pageItemsBaseSize) {
                    _this.canFetchNext = false;
                }
                var fetched = angular.copy(data);
                for (var _i = 0, fetched_6 = fetched; _i < fetched_6.length; _i++) {
                    var claspTicket = fetched_6[_i];
                    _this.claspTicketList.push(claspTicket);
                }
                _this.cnt = _this.claspTicketList.length;
                _this.isAddingClaspTicket = false;
                _this.dispFlg = true;
            }).catch(angular.noop);
        };
        ClaspTicketController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        return ClaspTicketController;
    }());
    memecApp.ClaspTicketController = ClaspTicketController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ClaspTicketDetailController = (function () {
        function ClaspTicketDetailController(ClaspTicketResource, UtilService) {
            this.ClaspTicketResource = ClaspTicketResource;
            this.UtilService = UtilService;
            this.dispFlg = false;
            this.extraTicket = '1dayオープンチケット';
            this.type = {
                init: 0,
                success: 1,
                error: 2
            };
            this.isSmartphone = this.UtilService.isSmartphone();
            this.now = new Date();
            this.state = this.type.init;
        }
        ClaspTicketDetailController.prototype.init = function (id) {
            var _this = this;
            this.claspTicket = this.ClaspTicketResource.get({ id: id });
            this.claspTicket.$promise.then(function (data) {
                _this.dispFlg = true;
            }).catch(function (error) {
                location.href = '/404';
            });
        };
        ClaspTicketDetailController.prototype.cancel = function () {
            var _this = this;
            $('#dialog').dialog({
                modal: true,
                title: "キャンセル確認",
                minWidth: this.isSmartphone ? 300 : 400,
                buttons: {
                    "キャンセルする": function () {
                        $('#dialog').dialog("close");
                        _this.ClaspTicketResource.delete({ id: _this.claspTicket.id })
                            .$promise.then(function (data) {
                            $('html,body').animate({ scrollTop: 0 }, 'fast');
                            _this.state = _this.type.success;
                        }).catch(function (error) {
                            $('html,body').animate({ scrollTop: 0 }, 'fast');
                            _this.state = _this.type.error;
                        });
                    },
                    "キャンセルしない": function () {
                        $('#dialog').dialog("close");
                    }
                }
            });
        };
        ClaspTicketDetailController.prototype.parseDate = function (date) {
            return new Date(date);
        };
        return ClaspTicketDetailController;
    }());
    memecApp.ClaspTicketDetailController = ClaspTicketDetailController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ClaspTicketPaymentController = (function () {
        function ClaspTicketPaymentController(ClaspTicketPaymentResource) {
            this.ClaspTicketPaymentResource = ClaspTicketPaymentResource;
            this.dispButton = true;
            this.dispFlg = false;
        }
        ClaspTicketPaymentController.prototype.init = function (cartId) {
            var _this = this;
            this.claspTicketPayment = this.ClaspTicketPaymentResource.get({ cartId: cartId });
            this.claspTicketPayment.$promise.then(function (data) {
                var results = _this.claspTicketPayment.products.map(function (product) {
                    return _this.canBuy(product.clasp_tickets);
                });
                _this.dispButton = results.every(function (val, index, array) { return (val); });
                _this.dispFlg = true;
            }).catch(function (error) {
                location.href = '/404';
            });
        };
        ClaspTicketPaymentController.prototype.canBuy = function (ticketList) {
            var canBuy = true;
            ticketList.forEach(function (ticket) {
                if (ticket.payment.status.id !== '1'
                    || new Date() < new Date(ticket.payment.start_date)
                    || new Date(ticket.payment.end_date) <= new Date()) {
                    canBuy = false;
                }
            });
            return canBuy;
        };
        return ClaspTicketPaymentController;
    }());
    memecApp.ClaspTicketPaymentController = ClaspTicketPaymentController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ShippingSlipController = (function () {
        function ShippingSlipController(ShippingSlipResource) {
            this.ShippingSlipResource = ShippingSlipResource;
            this.number = '';
        }
        ShippingSlipController.prototype.check = function () {
            var _this = this;
            if (!this.number) {
                alert('WEB納品書番号を入力してください');
                return;
            }
            this.ShippingSlipResource.save({ number: this.number })
                .$promise.then(function (data) {
                location.href = '/mypage/slip-detail/' + _this.number;
            }).catch(function (error) {
                alert('WEB納品書番号が不正または該当する申込が存在しません');
            });
        };
        return ShippingSlipController;
    }());
    memecApp.ShippingSlipController = ShippingSlipController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ShippingSlipDetailController = (function () {
        function ShippingSlipDetailController(ShippingSlipResource) {
            this.ShippingSlipResource = ShippingSlipResource;
        }
        ShippingSlipDetailController.prototype.init = function (number) {
            this.shippingSlip = this.ShippingSlipResource.save({ number: number });
            this.shippingSlip.$promise.then(function (data) {
            }).catch(function (error) {
                location.href = '/404';
            });
        };
        ShippingSlipDetailController.prototype.print = function () {
            window.print();
        };
        return ShippingSlipDetailController;
    }());
    memecApp.ShippingSlipDetailController = ShippingSlipDetailController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var CouponLoginController = (function () {
        function CouponLoginController($uibModal) {
            this.$uibModal = $uibModal;
            this.login();
        }
        CouponLoginController.prototype.login = function () {
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                location.replace('/mypage/coupon');
            }, function () {
            });
        };
        return CouponLoginController;
    }());
    memecApp.CouponLoginController = CouponLoginController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var EzineResource = (function () {
        function EzineResource($resource) {
            return $resource('/api/v1/mail-magazines', {}, {
                update: { method: 'PUT', isArray: false, params: { subscribed: "@subscribed" } }
            });
        }
        return EzineResource;
    }());
    memecApp.EzineResource = EzineResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var MailLogResource = (function () {
        function MailLogResource($resource) {
            return $resource('/api/v1/mail-log/:id', { id: '@id' }, {});
        }
        return MailLogResource;
    }());
    memecApp.MailLogResource = MailLogResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ClaspTicketResource = (function () {
        function ClaspTicketResource($resource) {
            return $resource('/api/v1/clasptickets/:id', { id: '@id' }, {});
        }
        return ClaspTicketResource;
    }());
    memecApp.ClaspTicketResource = ClaspTicketResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ClaspTicketPaymentResource = (function () {
        function ClaspTicketPaymentResource($resource) {
            return $resource('/api/v1/clasptickets/payment/:cartId', { cartId: '@cartId' }, {});
        }
        return ClaspTicketPaymentResource;
    }());
    memecApp.ClaspTicketPaymentResource = ClaspTicketPaymentResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var TicketEventResource = (function () {
        function TicketEventResource($resource) {
            return $resource('/api/v1/ticketevents/:id', { id: '@id' }, {});
        }
        return TicketEventResource;
    }());
    memecApp.TicketEventResource = TicketEventResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ShippingSlipResource = (function () {
        function ShippingSlipResource($resource) {
            return $resource('/api/v1/clasptickets/shipping-slip', {}, {});
        }
        return ShippingSlipResource;
    }());
    memecApp.ShippingSlipResource = ShippingSlipResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var OrderShippingResource = (function () {
        function OrderShippingResource($resource) {
            return $resource('/api/v1/orders/:id/shipping', { id: '@id' }, {
                update: {
                    method: 'PUT',
                    transformResponse: function (data, headers) {
                        var response = {
                            data: data,
                            headers: headers
                        };
                        response.data = data;
                        response.headers = headers();
                        return response;
                    }
                }
            });
        }
        return OrderShippingResource;
    }());
    memecApp.OrderShippingResource = OrderShippingResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ContactController = (function () {
        function ContactController($scope, $uibModal, APP_CONF, ContactResource, ContactValidationService) {
            this.$scope = $scope;
            this.$uibModal = $uibModal;
            this.APP_CONF = APP_CONF;
            this.ContactResource = ContactResource;
            this.ContactValidationService = ContactValidationService;
            this.lastNameErr = '';
            this.firstNameErr = '';
            this.lastNameKanaErr = '';
            this.firstNameKanaErr = '';
            this.firstMailErr = '';
            this.secondMailErr = '';
            this.podyErr = '';
            this.PrivacyErr = '';
            this.inquiryUrl = '';
            this.goodsinquiryUrl = '';
            this.inquiryUrl = APP_CONF.inquiryUrl;
            this.goodsinquiryUrl = APP_CONF.goodsinquiryUrl;
        }
        ContactController.prototype.init = function (orderId) {
            this.contact = new this.ContactResource();
            this.setContact(orderId);
            this.mailConfirm = '';
            this.privacy = false;
        };
        ContactController.prototype.confirm = function () {
            if (!this.validation()) {
                var alertMsg = this.getAlertMsg();
                if (alertMsg)
                    alert(alertMsg);
                return;
            }
            this.showConfirmModal();
        };
        ContactController.prototype.showConfirmModal = function () {
            var _this = this;
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/contactConf.html',
                backdrop: 'static'
            });
            this.modalInstance.result.then(function () {
                _this.init('');
                _this.showCompleteModal();
            }, function () {
            });
        };
        ContactController.prototype.showCompleteModal = function () {
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/contactComp.html',
                backdrop: 'true'
            });
            this.modalInstance.result.catch(angular.noop);
        };
        ContactController.prototype.closeModal = function () {
            var _this = this;
            var contact = this.ContactResource.save(this.contact);
            contact.$promise.then(function () {
                _this.modalInstance.close();
            }, function () {
                alert('お問い合わせを受け付けられませんでした。ご迷惑おかけしますが、時間を置いて再度ご操作ください。');
            }).catch(angular.noop);
        };
        ContactController.prototype.dismissModal = function () {
            this.modalInstance.dismiss();
        };
        ContactController.prototype.validation = function () {
            this.lastNameErr = this.ContactValidationService.validateLastName(this.contact.name.last);
            this.firstNameErr = this.ContactValidationService.validateFirstName(this.contact.name.first);
            if (!this.lastNameErr && !this.firstNameErr) {
                this.lastNameErr = this.ContactValidationService.validateCombineName(this.contact.name.last, this.contact.name.first);
            }
            this.lastNameKanaErr = this.ContactValidationService.validateLastNameKana(this.contact.name.kana.last);
            this.firstNameKanaErr = this.ContactValidationService.validateFirstNameKana(this.contact.name.kana.first);
            this.firstMailErr = this.ContactValidationService.validateFirstMail(this.contact.email);
            this.secondMailErr = this.ContactValidationService.validateSecondMail(this.mailConfirm);
            this.podyErr = this.ContactValidationService.validateBody(this.contact.body);
            this.PrivacyErr = this.ContactValidationService.validatePrivacy(this.privacy);
            if (!this.firstMailErr && !this.secondMailErr) {
                this.firstMailErr = this.ContactValidationService.validateMail(this.contact.email, this.mailConfirm);
            }
            if (!this.lastNameErr && !this.firstNameErr && !this.lastNameKanaErr && !this.firstNameKanaErr && !this.firstMailErr && !this.secondMailErr && !this.podyErr && !this.PrivacyErr) {
                return true;
            }
            return false;
        };
        ContactController.prototype.setContact = function (orderId) {
            this.contact.name = {
                last: '',
                first: '',
                kana: {
                    last: '',
                    first: ''
                }
            };
            this.contact.order_id = orderId;
            this.contact.email = '';
            this.contact.body = '';
        };
        ContactController.prototype.getAlertMsg = function () {
            var hangulCheckTargets = [
                this.contact.name.last,
                this.contact.name.first,
                this.contact.name.kana.last,
                this.contact.name.kana.first,
                this.contact.body
            ];
            return this.ContactValidationService.validateAlertHangul(hangulCheckTargets);
        };
        return ContactController;
    }());
    memecApp.ContactController = ContactController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ContactResource = (function () {
        function ContactResource($resource) {
            return $resource('/api/v1/inquiries', {});
        }
        return ContactResource;
    }());
    memecApp.ContactResource = ContactResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var ContactValidationService = (function () {
        function ContactValidationService() {
            this.EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
            this.EMAIL_RFC_REGEX = /(\.@)|^\.|(\.\..*@)/;
            this.HANGUL_REGEX = /[가-힣]/;
            this.DOMAIN_REGEX = /[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}/;
        }
        ContactValidationService.prototype.validateLastName = function (lastName) {
            if (!lastName) {
                return '※ お名前(姓)が入力されていません。';
            }
            if (lastName.match(this.HANGUL_REGEX) != null) {
                return '※ お名前(姓)にハングル文字は使用できません。';
            }
            return '';
        };
        ContactValidationService.prototype.validateFirstName = function (firstName) {
            if (!firstName) {
                return '※ お名前(名)が入力されていません。';
            }
            if (firstName.match(this.HANGUL_REGEX) != null) {
                return '※ お名前(名)にハングル文字は使用できません。';
            }
            return '';
        };
        ContactValidationService.prototype.validateCombineName = function (lastName, firstName) {
            var fullName = lastName.trim() + firstName.trim();
            if (fullName.match(this.DOMAIN_REGEX) != null) {
                return '※ 使用できない文字が含まれています。';
            }
            return '';
        };
        ContactValidationService.prototype.validateLastNameKana = function (lastNameKana) {
            if (!lastNameKana) {
                return '※ お名前(フリガナ・姓)が入力されていません。';
            }
            if (lastNameKana.match(this.HANGUL_REGEX) != null) {
                return '※ お名前(フリガナ・姓)にハングル文字は使用できません。';
            }
            if (lastNameKana.match(/^[ァ-ンｧ-ﾝﾞﾟー]+$/) == null) {
                return '※ お名前(フリガナ・姓)はカタカナで入力してください。';
            }
            return '';
        };
        ContactValidationService.prototype.validateFirstNameKana = function (firstNameKana) {
            if (!firstNameKana) {
                return '※ お名前(フリガナ・名)が入力されていません。';
            }
            if (firstNameKana.match(this.HANGUL_REGEX) != null) {
                return '※ お名前(フリガナ・名)にハングル文字は使用できません。';
            }
            if (firstNameKana.match(/^[ァ-ンｧ-ﾝﾞﾟー]+$/) == null) {
                return '※ お名前(フリガナ・名)はカタカナで入力してください。';
            }
            return '';
        };
        ContactValidationService.prototype.validateFirstMail = function (firstMail) {
            if (!firstMail) {
                return '※ メールアドレスが入力されていません。';
            }
            if (firstMail.match(this.EMAIL_REGEX) == null) {
                return '※ メールアドレスの形式が不正です。';
            }
            if (firstMail.match(this.EMAIL_RFC_REGEX) != null) {
                return '※ 他のメールアドレスをご利用ください。\n(@の前に『.』が入っている、または『.』が複数並んでいる、『.』からはじまるアドレスはご使用いただけません)';
            }
            return '';
        };
        ContactValidationService.prototype.validateSecondMail = function (secondMail) {
            if (!secondMail) {
                return '※ メールアドレス(確認)が入力されていません。';
            }
            if (secondMail.match(this.EMAIL_REGEX) == null) {
                return '※ メールアドレス(確認)の形式が不正です。';
            }
            if (secondMail.match(this.EMAIL_RFC_REGEX) != null) {
                return '※ 他のメールアドレスをご利用ください。\n(@の前に『.』が入っている、または『.』が複数並んでいる、『.』からはじまるアドレスはご使用いただけません)';
            }
            return '';
        };
        ContactValidationService.prototype.validateMail = function (firstMail, secondMail) {
            if (firstMail !== secondMail) {
                return '※ メールアドレスとメールアドレス(確認)が一致しません。';
            }
            return '';
        };
        ContactValidationService.prototype.validateBody = function (body) {
            if (!body) {
                return '※ お問い合わせ内容が入力されていません。';
            }
            if (body.length > 1000) {
                return '※ お問い合わせ内容は1000字以下で入力してください。';
            }
            if (body.match(this.HANGUL_REGEX) != null) {
                return '※ お問い合わせ内容にハングル文字は使用できません。';
            }
            return '';
        };
        ContactValidationService.prototype.validatePrivacy = function (privacy) {
            if (!privacy) {
                return '※「個人情報の取扱いに関して」に同意いただいていません。';
            }
            return '';
        };
        ContactValidationService.prototype.validateAlertHangul = function (words) {
            var _this = this;
            if (words.some(function (word) { return word.match(_this.HANGUL_REGEX) != null; })) {
                return 'ハングル文字は使用できません。\n日本語でご入力ください(Please input in japanese)';
            }
            return '';
        };
        return ContactValidationService;
    }());
    memecApp.ContactValidationService = ContactValidationService;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var RegistrationController = (function () {
        function RegistrationController(APP_CONF) {
            this.APP_CONF = APP_CONF;
            this.memRegURL = this.APP_CONF.memberRegUrl;
        }
        return RegistrationController;
    }());
    memecApp.RegistrationController = RegistrationController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var SiteInfoHelpController = (function () {
        function SiteInfoHelpController($location, $anchorScroll, HelpResource) {
            this.$location = $location;
            this.$anchorScroll = $anchorScroll;
            this.HelpResource = HelpResource;
        }
        SiteInfoHelpController.prototype.init = function (faqId) {
            var _this = this;
            this.help = this.HelpResource.query();
            this.help.$promise.then(function () {
                if (faqId != 999) {
                    _this.$location.hash(faqId);
                    _this.$anchorScroll();
                }
            }).catch(angular.noop);
        };
        return SiteInfoHelpController;
    }());
    memecApp.SiteInfoHelpController = SiteInfoHelpController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var HelpResource = (function () {
        function HelpResource($resource) {
            return $resource('/api/v1/helps', {});
        }
        return HelpResource;
    }());
    memecApp.HelpResource = HelpResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var QuestionnaireController = (function () {
        function QuestionnaireController($scope, $http, $uibModal, QuestionnaireResource, AuthResource) {
            this.$scope = $scope;
            this.$http = $http;
            this.$uibModal = $uibModal;
            this.QuestionnaireResource = QuestionnaireResource;
            this.AuthResource = AuthResource;
            this.ready = false;
            this.displayConfirmFlg = false;
        }
        QuestionnaireController.prototype.init = function (id) {
            var _this = this;
            this.questionnaireInfo = this.QuestionnaireResource.get({ id: id });
            this.questionnaireInfo.$promise.then(function () {
                _this.ready = true;
            }).catch(angular.noop);
        };
        QuestionnaireController.prototype.check = function () {
            var _this = this;
            this.AuthResource.get()
                .$promise.then(function (data) {
                if (data.logged_in) {
                    _this.switchCheckType();
                }
                else {
                    _this.login();
                }
            })
                .catch(function (error) {
                _this.login();
            });
        };
        QuestionnaireController.prototype.displayConfirm = function (isValid) {
            if (!isValid) {
                alert('ご入力内容またはご選択内容に不備がございます。\n内容をお確かめの上、再度確認ボタンを押してください。');
                return;
            }
            window.scrollTo(0, 0);
            this.displayConfirmFlg = true;
        };
        QuestionnaireController.prototype.hideConfirm = function () {
            window.scrollTo(0, 0);
            this.displayConfirmFlg = false;
        };
        QuestionnaireController.prototype.login = function () {
            var _this = this;
            this.modalInstance = this.$uibModal.open({
                controller: 'LoginController as ctrl',
                templateUrl: '/assets/html/login.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                _this.switchCheckType();
            }, function () {
            });
        };
        QuestionnaireController.prototype.switchCheckType = function () {
            if (this.questionnaireInfo.check_type == 'serial') {
                this.serialInput();
            }
            else {
                this.transition();
            }
        };
        QuestionnaireController.prototype.transitionWithSerial = function () {
            this.$http({
                method: 'POST',
                url: this.createMainPageUrl(),
                data: { serial: this.serial }
            });
        };
        QuestionnaireController.prototype.transition = function () {
            location.href = this.createMainPageUrl();
        };
        QuestionnaireController.prototype.createMainPageUrl = function () {
            return '/questionnaire/'
                + this.questionnaireInfo.uri
                + '/check/'
                + this.questionnaireInfo.check_type;
        };
        QuestionnaireController.prototype.serialInput = function () {
            var _this = this;
            window.scrollTo(0, 0);
            this.modalInstance = this.$uibModal.open({
                scope: this.$scope,
                templateUrl: '/assets/html/serial.html',
                backdrop: 'true'
            });
            this.modalInstance.result.then(function () {
                _this.transitionWithSerial();
            }, function () {
            });
        };
        QuestionnaireController.prototype.formatObjectAnswer = function (answer) {
            if (typeof answer != 'object') {
                return answer;
            }
            var subAnswers = [];
            for (var subAnswer in answer) {
                subAnswers.push(answer[subAnswer]);
            }
            return subAnswers.join(' ');
        };
        return QuestionnaireController;
    }());
    memecApp.QuestionnaireController = QuestionnaireController;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var QuestionnaireResource = (function () {
        function QuestionnaireResource($resource) {
            return $resource('/api/v1/questionnaire/:id', { id: '@id' });
        }
        return QuestionnaireResource;
    }());
    memecApp.QuestionnaireResource = QuestionnaireResource;
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    var conf = memecApp.ConfService.value;
    conf.resourceUrl = '//d1f6mom6a9ylri.cloudfront.net/';
    conf.electedUrl = '/mypage/ticket';
    conf.lotteryUrl = 'https://luck.akb48-group.com/';
    conf.fukubukuroLpUrl = 'https://shopping.akb48-group.com/lp/fukubukuro2019/';
    conf.veritransTokenApiKey = 'bfa7cb11-fed7-4c16-ab78-f0cd732ddc96';
    angular.module('memecApp.conf', []).constant('APP_CONF', conf);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.main', [
        'ngCookies',
        'ngAnimate',
        'ngResource',
        'ngTouch',
        'ui.bootstrap',
        'infinite-scroll',
        'memecApp.conf',
        'memecApp.top',
        'memecApp.member',
        'memecApp.selection',
        'memecApp.purchase',
        'memecApp.mypage',
        'memecApp.contact',
        'memecApp.siteInfo',
        'memecApp.questionnaire'
    ])
        .controller('GlobalConfigController', ['APP_CONF', memecApp.GlobalConfigController])
        .controller('WholeController', ['CartCountResource', memecApp.WholeController])
        .controller('HeaderController', ['APP_CONF', '$uibModal', 'AuthResource', 'CartCountResource', 'CategoryResource', memecApp.HeaderController])
        .controller('RightMenuController', ['APP_CONF', '$uibModal', 'AuthResource', 'MeResource', 'CategoryResource', memecApp.RightMenuController])
        .controller('SearchBarController', ['APP_CONF', 'AuthResource', 'MeResource', memecApp.SearchBarController])
        .controller('FooterController', ['APP_CONF', memecApp.FooterController])
        .controller('SideController', ['APP_CONF', 'CategoryResource', memecApp.SideController])
        .controller('SelectionFooterController', ['APP_CONF', 'GroupInfoResource', 'CategoryResource', memecApp.SelectionFooterController])
        .controller('LoginController', ['APP_CONF', 'AuthResource', 'LoginValidationService', '$cookies', '$uibModalInstance', memecApp.LoginController])
        .controller('DebugHttpsController', ['DebugHttpsResource', memecApp.DebugHttpsController])
        .controller('InNavController', ['CategoryResource', memecApp.InNavController])
        .controller('ModalBannerController', ['$uibModalInstance', 'viewContents', memecApp.ModalBannerController])
        .controller('ImgUrlController', ['APP_CONF', 'ImgUrlService', memecApp.ImgUrlController])
        .controller('GlobalMenuController', ['APP_CONF', '$uibModal', '$resource', '$scope', 'AuthResource', 'MeResource', memecApp.GlobalMenuController])
        .controller('SearchPageRedirectController', [memecApp.SearchPageRedirectController])
        .controller('CategoryLinkListController', ['APP_CONF', 'CategoryResource', memecApp.CategoryLinkListController])
        .controller('ServerTimeController', ['ServerTimeResource', memecApp.ServerTimeController])
        .controller('MemberController', ['APP_CONF', 'GroupInfoResource', memecApp.MemberController])
        .service('UtilService', [memecApp.UtilService])
        .service('BannerService', ['APP_CONF', '$http', memecApp.BannerService])
        .service('LoginValidationService', [memecApp.LoginValidationService])
        .service('ImgUrlService', ['APP_CONF', 'UtilService', memecApp.ImgUrlService])
        .service('JobService', ['$http', '$interval', memecApp.JobService])
        .service('IdentifyPaymentService', [memecApp.IdentifyPaymentService])
        .service('ModalBannerService', ['ModalBannerResource', 'UtilService', '$cookies', '$uibModal', memecApp.ModalBannerService])
        .factory('AuthResource', ['$resource', memecApp.AuthResource])
        .factory('ServerTimeResource', ['$resource', memecApp.ServerTimeResource])
        .factory('CartResource', ['$resource', memecApp.CartResource])
        .factory('CartCountResource', ['$resource', memecApp.CartCountResource])
        .factory('ProductDetailResource', ['$resource', memecApp.ProductDetailResource])
        .factory('UserResource', ['$resource', memecApp.UserResource])
        .factory('FavoriteResource', ['$resource', memecApp.FavoriteResource])
        .factory('CategoryResource', ['$resource', memecApp.CategoryResource])
        .factory('OrderResource', ['$resource', memecApp.OrderResource])
        .factory('CatalogResource', ['$resource', memecApp.CatalogResource])
        .factory('DebugHttpsResource', ['$resource', memecApp.DebugHttpsResource])
        .factory('ModalBannerResource', ['$resource', memecApp.ModalBannerResource])
        .factory('VeritransTokenResource', ['$resource', memecApp.VeritransTokenResource])
        .factory('CategoryProductResource', ['$resource', memecApp.CategoryProductResource])
        .directive("cateSlide", function () { return new memecApp.CategorySliderDirective(); })
        .directive('imgSlider', function () { return new memecApp.ImgSliderDirective(); })
        .directive('cateList', function () { return new memecApp.CategoryListDirective(); })
        .directive('threeImageSlider', function () { return new memecApp.ThreeImageSliderDirective(); })
        .directive('izoneSlide', function () { return new memecApp.IzoneBannerSliderDirective(); })
        .factory('MeResource', ['$resource', memecApp.MeResource])
        .filter('LineBreakFilter', ['$sce', memecApp.LineBreakFilter.filter])
        .filter('TrustSrcFilter', ['$sce', memecApp.TrustSrcFilter.filter])
        .filter('TrustHtmlFilter', ['$sce', memecApp.TrustHtmlFilter.filter])
        .filter('EventNoToStrFilter', [memecApp.EventNoToStrFilter.filter])
        .config(['$httpProvider', function ($httpProvider) {
            $httpProvider.defaults.useXDomain = true;
            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.get = {};
            }
            $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
            $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
            $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';
        }]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.contact', [])
        .controller('ContactController', ['$scope', '$uibModal', 'APP_CONF', 'ContactResource', 'ContactValidationService', memecApp.ContactController])
        .factory('ContactResource', ['$resource', memecApp.ContactResource])
        .service('ContactValidationService', [memecApp.ContactValidationService]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.member', [])
        .controller('MemberListController', ['APP_CONF', 'UtilService', 'GroupInfoResource', memecApp.MemberListController])
        .factory('GroupInfoResource', ['$resource', memecApp.GroupInfoResource]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.mypage', [])
        .controller('MypageTopController', ['APP_CONF', '$scope', '$uibModal', 'ImgUrlService', 'OrderResource', 'ClaspTicketResource', 'MeResource', 'FavoriteResource', 'TicketEventResource', memecApp.MypageTopController])
        .controller('CouponLoginController', ['$uibModal', memecApp.CouponLoginController])
        .controller('HistoryController', ['OrderResource', 'TicketEventResource', memecApp.HistoryController])
        .controller('HistoryDetailController', ['APP_CONF', 'IdentifyPaymentService', '$scope', '$uibModal', 'OrderResource', 'ImgUrlService', 'MailLogResource', 'TicketEventResource', 'OrderShippingResource', 'ZipCodeToAddressResource', 'DeliveryValidationService', 'UtilService', 'JobService', memecApp.HistoryDetailController])
        .controller('ClaspTicketController', ['ClaspTicketResource', 'TicketEventResource', memecApp.ClaspTicketController])
        .controller('ClaspTicketDetailController', ['ClaspTicketResource', 'UtilService', memecApp.ClaspTicketDetailController])
        .controller('ClaspTicketPaymentController', ['ClaspTicketPaymentResource', memecApp.ClaspTicketPaymentController])
        .controller('ShippingSlipController', ['ShippingSlipResource', memecApp.ShippingSlipController])
        .controller('ShippingSlipDetailController', ['ShippingSlipResource', memecApp.ShippingSlipDetailController])
        .controller('FavoriteController', ['ImgUrlService', 'FavoriteResource', memecApp.FavoriteController])
        .controller('EzineController', ['APP_CONF', 'EzineResource', 'MeResource', memecApp.EzineController])
        .factory('EzineResource', ['$resource', memecApp.EzineResource])
        .factory('MailLogResource', ['$resource', memecApp.MailLogResource])
        .factory('ClaspTicketResource', ['$resource', memecApp.ClaspTicketResource])
        .factory('ClaspTicketPaymentResource', ['$resource', memecApp.ClaspTicketPaymentResource])
        .factory('TicketEventResource', ['$resource', memecApp.TicketEventResource])
        .factory('ShippingSlipResource', ['$resource', memecApp.ShippingSlipResource])
        .factory('OrderShippingResource', ['$resource', memecApp.OrderShippingResource]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.purchase', [])
        .controller('DeliveryController', [
        '$scope',
        'APP_CONF',
        '$uibModal',
        'UtilService',
        'ShippingResource',
        'OrderResource',
        'OrderSlipResource',
        'PrefectureResource',
        'ZipCodeToAddressResource',
        'DeliveryValidationService',
        'JobService',
        memecApp.DeliveryController
    ])
        .controller('PaymentController', ['UtilService', 'IdentifyPaymentService', 'PaymentMethodResource', 'OrderSlipResource', 'OrderSlipPaymentResource', memecApp.PaymentController])
        .controller('ConfirmationController', ['$scope', '$uibModal', '$cookies', 'UtilService', 'ImgUrlService', 'IdentifyPaymentService', 'CartResource', 'OrderSlipResource', 'ClaspTicketPaymentResource', 'EzineResource', '$filter', 'JobService', 'ServerTimeResource', 'MeResource', memecApp.ConfirmationController])
        .controller('ConveniController', ['ConveniResource', 'MeResource', 'OrderSlipResource', 'OrderSlipPaymentResource', 'JobService', memecApp.ConveniController])
        .controller('CreditController', ['APP_CONF', 'CreditValidationService', 'CreditResource', 'OrderSlipResource', 'OrderSlipPaymentResource', 'VeritransTokenResource', 'JobService', memecApp.CreditController])
        .controller('CompletionController', ['APP_CONF', 'UtilService', 'BannerService', memecApp.CompletionController])
        .factory('OrderSlipResource', ['$resource', memecApp.OrderSlipResource])
        .factory('OrderSlipPaymentResource', ['$resource', memecApp.OrderSlipPaymentResource])
        .factory('PaymentMethodResource', ['$resource', memecApp.PaymentMethodResource])
        .factory('ShippingResource', ['$resource', memecApp.ShippingResource])
        .factory('ZipCodeToAddressResource', ['$resource', memecApp.ZipCodeToAddressResource])
        .factory('CreditResource', ['$resource', memecApp.CreditResource])
        .factory('ConveniResource', ['$resource', memecApp.ConveniResource])
        .factory('PrefectureResource', ['$resource', memecApp.PrefectureResource])
        .service('CreditValidationService', [memecApp.CreditValidationService])
        .service('DeliveryValidationService', [memecApp.DeliveryValidationService]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.questionnaire', ['ngSanitize'])
        .controller('QuestionnaireController', ['$scope', '$http', '$uibModal', 'QuestionnaireResource', 'AuthResource', memecApp.QuestionnaireController])
        .factory('QuestionnaireResource', ['$resource', memecApp.QuestionnaireResource]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.selection', ['ngSanitize'])
        .controller('ProductDetailController', [
        'APP_CONF',
        '$filter',
        '$uibModal',
        'ImgUrlService',
        'MeResource',
        'CartResource',
        'ProductDetailResource',
        'FavoriteResource',
        'AuthResource',
        'PaymentMethodResource',
        'LotteryProductResource',
        'LotteryWinningResource',
        'ServerTimeResource',
        'TicketEventResource',
        memecApp.ProductDetailController
    ])
        .controller('CartController', ['APP_CONF', '$uibModal', 'ImgUrlService', 'CartResource', 'OrderSlipResource', 'TicketEventResource', memecApp.CartController])
        .controller('TicketCartController', ['$uibModal', 'ImgUrlService', 'CartResource', 'ProductDetailResource', 'ClaspTicketPaymentResource', 'OrderSlipResource', '$q', memecApp.TicketCartController])
        .controller('LotteryCartController', ['APP_CONF', 'LotteryProductResource', 'MeResource', '$uibModal', 'LotteryWinningResource', 'AuthResource', 'CartResource', memecApp.LotteryCartController])
        .controller('BulkBuyingController', ['APP_CONF', '$scope', '$uibModal', '$sce', 'BulkBuyingResource', 'CartResource', 'ImgUrlService', 'UtilService', memecApp.BulkBuyingController])
        .controller('ProductListController', [
        'APP_CONF',
        'UtilService',
        'ImgUrlService',
        'CategoryResource',
        'CategoryProductResource',
        'ProductListResource',
        '$filter',
        'BannerService',
        memecApp.ProductListController
    ])
        .controller('ProductListMemberController', [
        'APP_CONF',
        'UtilService',
        'ImgUrlService',
        'MemberResource',
        'CatalogResource',
        memecApp.ProductListMemberController
    ])
        .controller('SearchController', ['APP_CONF', 'UtilService', 'ImgUrlService', 'SearchService', 'SearchResource', 'GroupInfoResource', 'CategoryResource', 'AuthResource', 'MeResource', memecApp.SearchController])
        .factory('ProductListResource', ['$resource', memecApp.ProductListResource])
        .factory('BulkBuyingResource', ['$resource', memecApp.BulkBuyingResource])
        .factory('SearchResource', ['$resource', memecApp.SearchResource])
        .factory('MemberResource', ['$resource', memecApp.MemberResource])
        .service('LotteryProductResource', ['$resource', memecApp.LotteryProductResource])
        .service('LotteryWinningResource', ['$resource', 'APP_CONF', memecApp.LotteryWinningResource])
        .service('SearchService', ['$http', memecApp.SearchService])
        .directive("productSlide", function () { return new memecApp.ProductSliderDirective(); })
        .directive("productSlidePc", function () { return new memecApp.ProductSliderPcDirective(); });
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.siteInfo', [])
        .controller('RegistrationController', ['APP_CONF', memecApp.RegistrationController])
        .controller('SiteInfoHelpController', ['$location', '$anchorScroll', 'HelpResource', memecApp.SiteInfoHelpController])
        .factory('HelpResource', ['$resource', memecApp.HelpResource]);
})(memecApp || (memecApp = {}));
var memecApp;
(function (memecApp) {
    'use strict';
    angular.module('memecApp.top', [])
        .controller('NewsController', ['APP_CONF', 'NewsResource', memecApp.NewsController])
        .controller('TopController', ['APP_CONF', 'UtilService', 'NewsResource', 'BannerService', 'ModalBannerService', memecApp.TopController])
        .controller('SliderController', ['APP_CONF', 'BannerService', memecApp.SliderController])
        .controller('TopPreviewController', ['CategoryResource', 'CategoryProductResource', memecApp.TopPreviewController])
        .factory('NewsResource', ['$resource', memecApp.NewsResource])
        .factory('FloatingAnimationLinkResource', ['$resource', memecApp.FloatingAnimationLinkResource])
        .directive("accordion", function () { return new memecApp.AccordionDirective(); })
        .directive("memberSlide", function () { return new memecApp.MemberSliderDirective(); })
        .directive("topSlide", function () { return new memecApp.TopSliderDirective(); })
        .directive("promotionSlider", function () { return new memecApp.PromotionSliderDirective; })
        .directive('floatingAnimationLink', function () { return new memecApp.FloatingAnimationLinkDirective(); });
})(memecApp || (memecApp = {}));
